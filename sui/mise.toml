[tools]
node = "24.8.0"
bun = "1.2.22"

[vars]
default_network = "testnet"
default_package = "counter"
gas_budget = "100000000"

# ===============================================
# 🚀 主要ワークフロー（よく使うタスク）
# ===============================================

[tasks.dev]
description = "フロントエンド開発サーバーの起動"
alias = "d"
run = "bun run dev"

[tasks.build]
description = "プロジェクト全体のビルド"
alias = "b"
depends = ["build:ui", "codegen"]

[tasks.deploy]
description = "完全デプロイ（環境設定→faucet→ビルド→パブリッシュ）"
run = '''
#!/usr/bin/env bash
set -euo pipefail
PACKAGE="${1:-counter}"
NETWORK="${2:-testnet}"

echo "🚀 $NETWORK への $PACKAGE の完全デプロイ開始..."
echo ""
echo "Step 1: $NETWORK 環境設定中..."
mise run sui:env $NETWORK
echo ""
echo "Step 2: SUIトークン取得中..."
mise run faucet:$NETWORK 2>/dev/null || mise run faucet:testnet
echo ""
echo "Step 3: $PACKAGE ビルド中..."
mise run sui:build $PACKAGE
echo ""
echo "Step 4: $PACKAGE を $NETWORK にパブリッシュ中..."
mise run sui:publish $PACKAGE $NETWORK
echo ""
echo "🎉 デプロイ完了！"
'''

[tasks.test]
description = "全テストの実行"
alias = "t"
run = "bun test"

[tasks.clean]
description = "全ビルド成果物のクリーンアップ"
alias = "c"
depends = ["clean:ui", "clean:move"]

[tasks.install]
description = "全依存関係のインストール"
alias = "i"
run = "bun install"

[tasks.up]
description = "依存関係を最新バージョンに更新"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "📦 古いパッケージをチェック中..."
bun outdated
echo ""
echo "📦 package.jsonを最新バージョンに更新中..."
bun npm-check-updates -u
echo ""
echo "📦 更新された依存関係をインストール中..."
bun install
echo "✅ 依存関係を最新バージョンに更新完了！"
'''

# ===============================================
# 📋 ユーティリティ・管理タスク
# ===============================================

[tasks.lint]
description = "全リンターの実行"
alias = "l"
depends = ["lint:biome", "lint:typescript", "lint:eslint"]

[tasks.fix]
description = "自動修正可能な問題の修正"
alias = "f"
depends = ["fix:biome", "fix:eslint"]

[tasks.preview]
description = "ビルド済みアプリのプレビュー"
alias = "p"
run = "bun run preview"

[tasks.typecheck]
description = "TypeScript型チェックの実行"
alias = "tc"
run = "bun tsc --noEmit"

[tasks.codegen]
description = "Sui ABI型定義の生成"
alias = "gen"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🏗️ 型定義生成中..."
echo ""
echo "Sui ABI定義を生成中..."
bun scripts/suigenv0.ts --config suigen-config.json --network testnet --output src/abi
echo ""
echo "✅ 型定義生成完了！"
'''

# ===============================================
# 🎯 その他のコンポジットタスク
# ===============================================

[tasks."deploy:devnet"]
description = "devnetへの完全デプロイ"
alias = "deploy-dev"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🚀 devnetへの完全デプロイ開始..."
echo ""
echo "Step 1: devnet環境設定中..."
mise run sui:env-devnet
echo ""
echo "Step 2: SUIトークン取得中..."
mise run faucet:devnet
echo ""
echo "Step 3: コントラクトビルド中..."
mise run sui:build
echo ""
echo "Step 4: コントラクトパブリッシュ中..."
mise run sui:publish
echo ""
echo "🎉 デプロイ完了！"
'''

[tasks."test:watch"]
description = "ウォッチモードでのテスト実行"
alias = "tw"
run = "bun test --watch"

# ===============================================
# 🌐 アトミック UIタスク
# ===============================================

[tasks."build:ui"]
description = "UIのみビルド"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🏗️ UIビルド中..."
bun run build
echo "✅ UIビルド完了"
'''

[tasks."clean:ui"]
description = "UI成果物のみクリーン"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🧹 UI成果物クリーン中..."
rip .next || true
rip .next-dev || true
rip tsconfig.tsbuildinfo || true
rip .serena || true
rip dist || true
echo "✅ UIクリーン完了"
'''

# ===============================================
# 🔍 アトミック リント・修正タスク
# ===============================================

[tasks."lint:biome"]
description = "Biomeチェックのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 Biomeチェック中..."
bun biome check .
echo "✅ Biomeチェック完了"
'''

[tasks."lint:typescript"]
description = "TypeScript型チェックのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 TypeScript型チェック中..."
bun tsc --noEmit
echo "✅ TypeScript型チェック完了"
'''

[tasks."lint:eslint"]
description = "ESLintチェックのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 ESLintチェック中..."
bun eslint . --ext .ts,.tsx --max-warnings 0
echo "✅ ESLintチェック完了"
'''

[tasks."fix:biome"]
description = "Biome自動修正のみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔧 Biome自動修正中..."
bun biome check --write --unsafe .
echo "✅ Biome修正完了"
'''

[tasks."fix:eslint"]
description = "ESLint自動修正のみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔧 ESLint自動修正中..."
bun eslint src --ext .ts,.tsx --fix || true
echo "✅ ESLint修正完了"
'''

# ===============================================
# ⛽ アトミック Sui環境・faucetタスク
# ===============================================

[tasks."sui:env"]
description = "指定ネットワーク用にSui CLI設定"
alias = "sui-env"
run = '''
#!/usr/bin/env bash
set -euo pipefail
NETWORK="${1:-testnet}"
echo "🔧 Sui CLIを$NETWORK用に設定中..."
sui client switch --env $NETWORK || sui client new-env --alias $NETWORK --rpc https://fullnode.$NETWORK.sui.io:443
echo "✅ $NETWORK に切り替え完了"
sui client active-env
'''

[tasks."sui:env-devnet"]
description = "devnet用のSui CLI設定"
alias = "sui-dev"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔧 Sui CLIをdevnet用に設定中..."
sui client new-env --alias devnet --rpc https://fullnode.devnet.sui.io:443 || true
sui client switch --env devnet
echo "✅ devnetに切り替え完了"
sui client active-env
'''

[tasks."faucet:testnet"]
description = "testnet faucetをブラウザで開く"
alias = "faucet"
run = "open https://faucet.sui.io/?network=testnet"

[tasks."faucet:devnet"]
description = "devnet faucet API経由でSUIトークンを要求"
alias = "faucet-dev"
run = '''
#!/usr/bin/env bash
set -euo pipefail
ADDRESS=$(sui client active-address 2>/dev/null || echo "")
if [ -z "$ADDRESS" ]; then
    echo "❌ アクティブなSuiアドレスが見つかりません。'sui client'でウォレットを設定してください。"
    exit 1
fi
echo "🚀 アドレス $ADDRESS にSUIトークンを要求中"
echo "📡 devnet faucet APIを呼び出し中..."
curl --location --request POST 'https://faucet.devnet.sui.io/v2/gas' \
    --header 'Content-Type: application/json' \
    --data-raw "{
        \"FixedAmountRequest\": {
            \"recipient\": \"$ADDRESS\"
        }
    }"
echo ""
echo "✅ faucet要求完了！"
'''

# ===============================================
# 🔨 アトミック Sui Moveタスク
# ===============================================

[tasks."sui:build"]
description = "Moveコントラクトのみビルド"
alias = "move-build"
run = '''
#!/usr/bin/env bash
set -euo pipefail
PACKAGE="${1:-counter}"
echo "📦 $PACKAGE ビルド中..."
cd move/$PACKAGE && sui move build
echo "✅ $PACKAGE ビルド完了"
'''

[tasks."sui:publish"]
description = "Moveコントラクトのみパブリッシュ"
alias = "move-publish"
run = '''
#!/usr/bin/env bash
set -euo pipefail
PACKAGE="${1:-counter}"
NETWORK="${2:-testnet}"

echo "📦 $PACKAGE を $NETWORK にパブリッシュ中..."
mise run sui:env $NETWORK
cd move/$PACKAGE
sui client publish --gas-budget {{vars.gas_budget}}

echo ""
echo "🔄 次の手順:"
echo "  1. suigen-config.jsonにPackage IDを手動で更新"
echo "  2. mise run gen    # ABI定義の更新"
echo "  3. mise run dev    # 開発サーバー再起動"
'''

[tasks."move:format"]
description = "Moveコードフォーマットのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🎨 Moveコードフォーマット中..."
bun @mysten/prettier-plugin-move --use-module-label=true -w move/**/*.move
echo "✅ Moveコードフォーマット完了"
'''

[tasks."clean:move"]
description = "Move成果物のみクリーン"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🧹 Move成果物クリーン中..."
rip **/build || true
echo "✅ Moveクリーン完了"
'''

# ===============================================
# 📄 アトミック コードジェネレーションタスク
# ===============================================

[tasks."codegen:abi"]
description = "Sui ABI定義のみ生成"
alias = ["gen-abi", "abigen"]
run = "bun scripts/suigenv0.ts --config suigen-config.json --network testnet --output src/abi"

