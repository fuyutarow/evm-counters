/**
 * counter package ABI definition with TypeScript interfaces
 * 自動生成されたファイル - 手動で編集しないでください
 *
 * Generated by: scripts/suigenv0.ts
 * Generated at: 2025-09-18T18:31:17.942Z
 */

import {
  type Transaction,
  type TransactionArgument,
  type TransactionResult,
} from "@mysten/sui/transactions";

export const counterAbi = {
  owned_counter: {
    fileFormatVersion: 6,
    address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
    name: "owned_counter",
    friends: [],
    structs: {
      OwnedCounter: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "value",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      increment: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
                module: "owned_counter",
                name: "OwnedCounter",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
              module: "owned_counter",
              name: "OwnedCounter",
              typeArguments: [],
            },
          },
        ],
      },
      set_value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
                module: "owned_counter",
                name: "OwnedCounter",
                typeArguments: [],
              },
            },
          },
          "U64",
        ],
        return: [],
      },
    },
  },
  shared_counter: {
    fileFormatVersion: 6,
    address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
    name: "shared_counter",
    friends: [],
    structs: {
      SharedCounter: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "owner",
            type: "Address",
          },
          {
            name: "value",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      create: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      increment: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
                module: "shared_counter",
                name: "SharedCounter",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      set_value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0xcbd7ef54f57ea1a999c0843a3c41afa7794b1a9687dd6f6f028d7ee9bd4d8afe",
                module: "shared_counter",
                name: "SharedCounter",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
    },
  },
} as const;

export type CounterModules = typeof counterAbi;

// Generated TypeScript interfaces
export interface Owned_counterOwnedCounterType {
  id: { id: string };
  value: string;
}

export interface Shared_counterSharedCounterType {
  id: { id: string };
  owner: string;
  value: string;
}

// Generated type guards
export function isOwned_counterOwnedCounterType(
  data: unknown,
): data is Owned_counterOwnedCounterType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["value"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isShared_counterSharedCounterType(
  data: unknown,
): data is Shared_counterSharedCounterType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "owner", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["owner", "value"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

// Generated parse functions
export function parseOwned_counterOwnedCounter(
  json: unknown,
): Owned_counterOwnedCounterType | null {
  return isOwned_counterOwnedCounterType(json) ? json : null;
}

export function parseShared_counterSharedCounter(
  json: unknown,
): Shared_counterSharedCounterType | null {
  return isShared_counterSharedCounterType(json) ? json : null;
}

// Extract packageId once at module level for better performance
const packageId = Object.values(counterAbi)[0]?.address;
if (!packageId) {
  throw new Error("Package ID not found in counter ABI");
}

// Type-safe method-chaining API
export const counterPackage = {
  abi: counterAbi,
  packageId,
  owned_counter: {
    increment(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::owned_counter::increment`,
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::owned_counter::new`,
        arguments: [],
      });
    },
    set_value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::owned_counter::set_value`,
        arguments: [...options.arguments],
      });
    },
  },
  shared_counter: {
    create(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::shared_counter::create`,
        arguments: [],
      });
    },
    increment(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::shared_counter::increment`,
        arguments: [...options.arguments],
      });
    },
    set_value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::shared_counter::set_value`,
        arguments: [...options.arguments],
      });
    },
  },
} as const;
