[tools]
node = "24.8.0"
rust = "1.89.0"

[env]
_.path = ["~/.local/share/solana/install/active_release/bin"]
SOLANA_HOME = "~/.local/share/solana/install/active_release"
RUSTFLAGS = "-A unexpected_cfgs -A deprecated"

[vars]
default_network = "localnet"
gas_budget = "100000000"

# ===============================================
# 🚀 主要ワークフロー（よく使うタスク）
# ===============================================

[tasks.dev]
description = "開発環境の完全セットアップ"
alias = "d"
depends = ["localnode:start", "localnode:wait", "wallet:setup", "deploy", "ui:dev"]

[tasks.build]
description = "全プログラムのビルド"
alias = "b"
depends = ["build:programs"]

[tasks.deploy]
description = "全プログラムのデプロイ"
depends = ["build", "keypairs", "deploy:programs"]

[tasks.test]
description = "プログラムビルドテスト"
alias = "t"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🧪 プログラムビルドテスト中..."
anchor build --no-idl
echo "✅ ビルド成功（テスト未実装）"
'''

[tasks.clean]
description = "全ビルド成果物のクリーンアップ"
alias = "c"
depends = ["clean:target", "clean:ledger"]

[tasks.install]
description = "全依存関係のインストール"
alias = "i"
depends = ["ui:install", "install:solana", "install:anchor"]

[tasks."install-cli"]
description = "Solana & Anchor CLIのインストール"
alias = "ic"
depends = ["install:solana", "install:anchor"]

[tasks.up]
description = "依存関係を最新バージョンに更新"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "📦 古いパッケージをチェック中..."
bun outdated
echo ""
echo "📦 package.jsonを最新バージョンに更新中..."
bunx npm-check-updates -u
echo ""
echo "📦 更新された依存関係をインストール中..."
bun install
echo "✅ 依存関係を最新バージョンに更新完了！"
'''

# ===============================================
# 📋 ユーティリティ・管理タスク
# ===============================================

[tasks.status]
description = "開発環境のステータス表示"
alias = "s"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "📋 開発環境ステータス"
echo "=================================="
echo ""
echo "🔧 ツール:"
solana --version 2>/dev/null || echo "❌ Solana 未インストール"
anchor --version 2>/dev/null || echo "❌ Anchor 未インストール"
echo ""
echo "🌐 ネットワーク:"
solana config get | grep 'RPC URL' | awk '{print "   RPC URL:", $3}' 2>/dev/null || echo "❌ Solana設定未完了"
echo ""
echo "💰 ウォレット:"
solana address 2>/dev/null | awk '{print "   アドレス:", $1}' || echo "❌ ウォレット未設定"
solana balance 2>/dev/null | awk '{print "   残高:", $1, $2}' || echo "❌ 残高情報なし"
echo ""
echo "🚀 バリデータ:"
if solana cluster-version > /dev/null 2>&1; then
    echo "   ステータス: ✅ 起動中"
    solana cluster-version | head -1 | awk '{print "   バージョン:", $1, $2}'
else
    echo "   ステータス: ❌ 停止中"
fi
echo ""
echo "📦 プログラム:"
if [ -f "target/deploy/owned_counter-keypair.json" ]; then
    echo "   owned_counter: $(solana address -k target/deploy/owned_counter-keypair.json)"
else
    echo "   owned_counter: ❌ 未デプロイ"
fi
if [ -f "target/deploy/shared_counter-keypair.json" ]; then
    echo "   shared_counter: $(solana address -k target/deploy/shared_counter-keypair.json)"
else
    echo "   shared_counter: ❌ 未デプロイ"
fi
'''

[tasks.lint]
description = "全リンターの実行"
alias = "l"
depends = ["lint:biome", "lint:typescript", "lint:rust"]

[tasks.fix]
description = "自動修正可能な問題の修正"
alias = "f"
depends = ["fix:biome", "fix:rust"]

[tasks.logs]
description = "バリデータログの表示"
run = "solana logs"

# ===============================================
# 🎯 その他のコンポジットタスク
# ===============================================

[tasks."dev:backend"]
description = "バックエンドのみ（バリデータ + デプロイ）"
depends = ["localnode:start", "localnode:wait", "wallet:setup", "deploy"]

[tasks."dev:full"]
description = "フル開発セットアップ（ゼロから）"
depends = ["install", "dev"]

[tasks."wallet:setup"]
description = "ウォレットの完全セットアップ"
depends = ["wallet:create", "wallet:configure", "wallet:airdrop"]

[tasks.keypairs]
description = "全鍵ペアの生成"
depends = ["keypair:owned", "keypair:shared"]

[tasks.idl]
description = "全IDLファイルの生成"
depends = ["idl:owned", "idl:shared"]

# ===============================================
# 🏗️  アトミック インフラタスク（実装詳細）
# ===============================================

[tasks."localnode:start"]
description = "ローカルSolanaバリデータの起動"
alias = "vs"
run = '''
#!/usr/bin/env bash
set -euo pipefail
if ! command -v solana-test-validator >/dev/null 2>&1; then
    echo "❌ solana-test-validator が見つかりません。'mise run install:solana' を実行してください"
    exit 1
fi

# 既に起動中かチェック
if solana cluster-version > /dev/null 2>&1; then
    echo "✅ バリデータは既に起動中"
    exit 0
fi

echo "🚀 バリデータ起動中..."
solana-test-validator --reset &
'''

[tasks."localnode:stop"]
description = "ローカルSolanaバリデータの停止"
alias = "vx"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🛑 バリデータ停止中..."
pkill -f solana-test-validator || echo "バリデータプロセスが見つかりません"
'''

[tasks."localnode:status"]
description = "バリデータステータスの確認"
run = '''
#!/usr/bin/env bash
set -euo pipefail
if solana cluster-version > /dev/null 2>&1; then
    echo "✅ バリデータ起動中"
    echo "クラスターバージョン: $(solana cluster-version)"
else
    echo "❌ バリデータ停止中"
    exit 1
fi
'''

[tasks."localnode:wait"]
description = "バリデータの起動完了を待機"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "⏳ バリデータの起動完了を待機中..."
for i in {1..30}; do
    if solana cluster-version > /dev/null 2>&1; then
        echo "✅ バリデータ起動完了!"
        exit 0
    fi
    echo -n "."
    sleep 1
done
echo ""
echo "❌ バリデータが30秒以内に起動しませんでした"
exit 1
'''

# ===============================================
# 💰 アトミック ウォレットタスク
# ===============================================

[tasks."wallet:create"]
description = "開発用ウォレットの作成"
run = '''
#!/usr/bin/env bash
set -euo pipefail
mkdir -p ~/.config/solana
if [ -f ~/.config/solana/id.json ]; then
    echo "✅ ウォレット既存: $(solana address)"
else
    echo "🔑 新しいウォレット作成中..."
    solana-keygen new --no-bip39-passphrase --silent --force --outfile ~/.config/solana/id.json
    echo "✅ ウォレット作成完了: $(solana address)"
fi
'''

[tasks."wallet:configure"]
description = "ウォレットとネットワークの設定"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "⚙️ ウォレット設定中..."
solana config set --url localhost
solana config set --keypair ~/.config/solana/id.json
echo "✅ localhost用ウォレット設定完了"
'''

[tasks."wallet:airdrop"]
description = "SOLエアドロップの要求"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "💰 エアドロップ要求中..."
solana airdrop 2
echo "💰 追加エアドロップ要求中..."
solana airdrop 2
echo "✅ 残高: $(solana balance)"
'''

[tasks."wallet:balance"]
description = "ウォレット残高の表示"
alias = "balance"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "💰 ウォレット: $(solana address)"
echo "💰 残高: $(solana balance)"
echo "🌐 ネットワーク: $(solana config get | grep 'RPC URL' | awk '{print $3}')"
'''

# ===============================================
# 🔨 アトミック ビルドタスク
# ===============================================

[tasks."build:programs"]
description = "全プログラムのビルド"
run = '''
#!/usr/bin/env bash
set -euo pipefail
mkdir -p target/deploy
echo "🔨 プログラムビルド中..."
echo "  owned_counter..."
cargo build-sbf --manifest-path programs/owned_counter/Cargo.toml --sbf-out-dir target/deploy
echo "  shared_counter..."
cargo build-sbf --manifest-path programs/shared_counter/Cargo.toml --sbf-out-dir target/deploy

if [ -f "target/deploy/owned_counter.so" ] && [ -f "target/deploy/shared_counter.so" ]; then
    echo "✅ 全プログラムビルド完了:"
    echo "   owned_counter.so ($(stat -c%s target/deploy/owned_counter.so) bytes)"
    echo "   shared_counter.so ($(stat -c%s target/deploy/shared_counter.so) bytes)"
else
    echo "❌ 一部のプログラムビルドが失敗しました"
    ls -la target/deploy/*.so 2>/dev/null || echo "  ビルド成果物が見つかりません"
    exit 1
fi
'''

[tasks."idl:owned"]
description = "owned_counter IDLのみ生成"
run = '''
#!/usr/bin/env bash
set -euo pipefail
mkdir -p src/idl
echo "📄 owned_counter IDL生成中..."
if anchor idl build -p owned_counter -o src/idl/owned_counter.json -t src/idl/owned_counter.ts --no-docs 2>/dev/null; then
    echo "✅ owned_counter IDL生成完了"
else
    echo "❌ owned_counter IDL生成失敗"
    exit 1
fi
'''

[tasks."idl:shared"]
description = "shared_counter IDLのみ生成"
run = '''
#!/usr/bin/env bash
set -euo pipefail
mkdir -p src/idl
echo "📄 shared_counter IDL生成中..."
if anchor idl build -p shared_counter -o src/idl/shared_counter.json -t src/idl/shared_counter.ts --no-docs 2>/dev/null; then
    echo "✅ shared_counter IDL生成完了"
else
    echo "❌ shared_counter IDL生成失敗"
    exit 1
fi
'''

# ===============================================
# 🔑 アトミック 鍵ペアタスク
# ===============================================

[tasks."keypair:owned"]
description = "owned_counter鍵ペアのみ生成"
run = '''
#!/usr/bin/env bash
set -euo pipefail
mkdir -p target/deploy
if [ -f "target/deploy/owned_counter-keypair.json" ]; then
    echo "✅ owned_counter鍵ペア既存: $(solana address -k target/deploy/owned_counter-keypair.json)"
else
    echo "🔑 owned_counter鍵ペア生成中..."
    solana-keygen new -o target/deploy/owned_counter-keypair.json --no-bip39-passphrase --force --silent
    echo "✅ owned_counter鍵ペア: $(solana address -k target/deploy/owned_counter-keypair.json)"
fi
'''

[tasks."keypair:shared"]
description = "shared_counter鍵ペアのみ生成"
run = '''
#!/usr/bin/env bash
set -euo pipefail
mkdir -p target/deploy
if [ -f "target/deploy/shared_counter-keypair.json" ]; then
    echo "✅ shared_counter鍵ペア既存: $(solana address -k target/deploy/shared_counter-keypair.json)"
else
    echo "🔑 shared_counter鍵ペア生成中..."
    solana-keygen new -o target/deploy/shared_counter-keypair.json --no-bip39-passphrase --force --silent
    echo "✅ shared_counter鍵ペア: $(solana address -k target/deploy/shared_counter-keypair.json)"
fi
'''

# ===============================================
# 🚀 アトミック デプロイタスク
# ===============================================

[tasks."deploy:programs"]
description = "全プログラムのデプロイ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🚀 プログラムデプロイ中..."

# 前提条件チェック
if [ ! -f "target/deploy/owned_counter.so" ] || [ ! -f "target/deploy/shared_counter.so" ]; then
    echo "❌ プログラムファイルが見つかりません。'mise run build:programs' を実行してください"
    exit 1
fi
if [ ! -f "target/deploy/owned_counter-keypair.json" ] || [ ! -f "target/deploy/shared_counter-keypair.json" ]; then
    echo "❌ 鍵ペアが見つかりません。'mise run keypairs' を実行してください"
    exit 1
fi

echo "  owned_counter デプロイ中..."
solana program deploy target/deploy/owned_counter.so \
  --program-id target/deploy/owned_counter-keypair.json

echo "  shared_counter デプロイ中..."
solana program deploy target/deploy/shared_counter.so \
  --program-id target/deploy/shared_counter-keypair.json

echo "✅ 全プログラムデプロイ完了:"
echo "   owned_counter: $(solana address -k target/deploy/owned_counter-keypair.json)"
echo "   shared_counter: $(solana address -k target/deploy/shared_counter-keypair.json)"
'''

# ===============================================
# 🌐 アトミック フロントエンドタスク
# ===============================================

[tasks."ui:install"]
description = "UI依存関係のみインストール"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "📦 フロントエンド依存関係インストール中..."
bun install
echo "✅ 依存関係インストール完了"
'''

[tasks."ui:dev"]
description = "UI開発サーバーのみ起動"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🌐 フロントエンド開発サーバー起動中..."
bun run dev
'''

[tasks."ui:build"]
description = "UIのみビルド"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🏗️ フロントエンドビルド中..."
bun run build
echo "✅ フロントエンドビルド完了"
'''

[tasks."ui:typecheck"]
description = "TypeScript型チェックのみ"
alias = "typecheck"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 型チェック中..."
bun tsc --noEmit
echo "✅ 型チェック完了"
'''

# ===============================================
# 🧹 アトミック クリーンアップタスク
# ===============================================

[tasks."clean:target"]
description = "targetディレクトリのみクリーン"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🧹 targetディレクトリクリーン中..."
rm -rf target/ || true
echo "✅ targetクリーン完了"
'''

[tasks."clean:ledger"]
description = "バリデータ台帳のみクリーン"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🧹 バリデータ台帳クリーン中..."
rm -rf test-ledger/ || true
echo "✅ 台帳クリーン完了"
'''

# ===============================================
# 📦 アトミック インストールタスク
# ===============================================

[tasks."install:solana"]
description = "Solanaツールチェーンのみインストール"
run = '''
#!/usr/bin/env bash
set -euo pipefail
if ! command -v solana-test-validator >/dev/null 2>&1; then
    echo "📦 Solana/Agave ツールチェーン v3.0.2 インストール中..."
    sh -c "$(curl -sSfL https://release.anza.xyz/v3.0.2/install)"
    echo "✅ Solana インストール完了: $(~/.local/share/solana/install/active_release/bin/solana --version)"
else
    echo "✅ Solana 既にインストール済み: $(solana-test-validator --version | head -1)"
fi
'''

[tasks."install:anchor"]
description = "Anchorツールチェーンのみインストール"
run = '''
#!/usr/bin/env bash
set -euo pipefail
if ! command -v avm >/dev/null 2>&1; then
    echo "📦 Anchor AVM インストール中..."
    cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
fi
echo "📦 Anchor v0.31.1 インストール中..."
avm install 0.31.1
avm use 0.31.1
echo "✅ Anchor 準備完了: $(anchor --version)"
'''

# ===============================================
# 🔍 アトミック リント・修正タスク
# ===============================================

[tasks."lint:biome"]
description = "Biomeチェックのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 Biomeチェック中..."
bun biome check .
echo "✅ Biomeチェック完了"
'''

[tasks."lint:typescript"]
description = "TypeScript型チェックのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 TypeScript型チェック中..."
bun tsc --noEmit
echo "✅ TypeScript型チェック完了"
'''

[tasks."lint:rust"]
description = "Rustチェックのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 Rustチェック中..."
echo "  owned_counter..."
cargo check --manifest-path programs/owned_counter/Cargo.toml
echo "  shared_counter..."
cargo check --manifest-path programs/shared_counter/Cargo.toml
echo "✅ Rustチェック完了"
'''

[tasks."fix:biome"]
description = "Biome自動修正のみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔧 Biome自動修正中..."
bun biome check --write --unsafe .
echo "✅ Biome修正完了"
'''

[tasks."fix:rust"]
description = "Rustフォーマットのみ"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔧 Rustフォーマット中..."
echo "  owned_counter..."
cargo fmt --manifest-path programs/owned_counter/Cargo.toml
echo "  shared_counter..."
cargo fmt --manifest-path programs/shared_counter/Cargo.toml
echo "✅ Rustフォーマット完了"
'''