/**
 * sui package ABI definition with TypeScript interfaces
 * 自動生成されたファイル - 手動で編集しないでください
 *
 * Generated by: scripts/suigenv0.ts
 * Generated at: 2025-09-18T18:31:18.156Z
 */

import {
  type Transaction,
  type TransactionArgument,
  type TransactionResult,
} from "@mysten/sui/transactions";

export const suiAbi = {
  accumulator: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "accumulator",
    friends: [
      {
        address: "0x2",
        name: "accumulator_metadata",
      },
      {
        address: "0x2",
        name: "accumulator_settlement",
      },
      {
        address: "0x2",
        name: "balance",
      },
    ],
    structs: {
      AccumulatorRoot: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      Key: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "address",
            type: "Address",
          },
        ],
      },
      U128: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "value",
            type: "U128",
          },
        ],
      },
    },
    exposedFunctions: {
      accumulator_address: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: ["Address"],
        return: ["Address"],
      },
      accumulator_key: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: ["Address"],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "Key",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      create_u128: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: ["U128"],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "U128",
              typeArguments: [],
            },
          },
        ],
      },
      destroy_u128: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "U128",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      emit_deposit_event: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: ["Address", "Address", "U64"],
        return: [],
      },
      emit_withdraw_event: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: ["Address", "Address", "U64"],
        return: [],
      },
      is_zero_u128: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "U128",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      root_add_accumulator: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "Key",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      root_borrow_accumulator_mut: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "Key",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      root_has_accumulator: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "Key",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: ["Bool"],
      },
      root_id: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      root_id_mut: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      root_remove_accumulator: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "accumulator",
              name: "Key",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
      update_u128: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "U128",
                typeArguments: [],
              },
            },
          },
          "U128",
          "U128",
        ],
        return: [],
      },
    },
  },
  accumulator_metadata: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "accumulator_metadata",
    friends: [
      {
        address: "0x2",
        name: "accumulator_settlement",
      },
    ],
    structs: {
      Metadata: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "fields",
            type: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
        ],
      },
      MetadataKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      Owner: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "balances",
            type: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            name: "owner",
            type: "Address",
          },
        ],
      },
      OwnerKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "owner",
            type: "Address",
          },
        ],
      },
    },
    exposedFunctions: {
      create_accumulator_metadata: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      remove_accumulator_metadata: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "accumulator",
                name: "AccumulatorRoot",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
        return: [],
      },
    },
  },
  accumulator_settlement: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "accumulator_settlement",
    friends: [],
    structs: {},
    exposedFunctions: {},
  },
  address: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "address",
    friends: [],
    structs: {},
    exposedFunctions: {
      from_ascii_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: ["Address"],
      },
      from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: ["Address"],
      },
      from_u256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U256"],
        return: ["Address"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: ["U64"],
      },
      max: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: ["U256"],
      },
      to_ascii_string: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      to_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      to_string: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      to_u256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: ["U256"],
      },
    },
  },
  authenticator_state: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "authenticator_state",
    friends: [],
    structs: {
      ActiveJwk: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "jwk_id",
            type: {
              Struct: {
                address: "0x2",
                module: "authenticator_state",
                name: "JwkId",
                typeArguments: [],
              },
            },
          },
          {
            name: "jwk",
            type: {
              Struct: {
                address: "0x2",
                module: "authenticator_state",
                name: "JWK",
                typeArguments: [],
              },
            },
          },
          {
            name: "epoch",
            type: "U64",
          },
        ],
      },
      AuthenticatorState: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "version",
            type: "U64",
          },
        ],
      },
      AuthenticatorStateInner: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "version",
            type: "U64",
          },
          {
            name: "active_jwks",
            type: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "authenticator_state",
                  name: "ActiveJwk",
                  typeArguments: [],
                },
              },
            },
          },
        ],
      },
      JWK: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "kty",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "e",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "n",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "alg",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      JwkId: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "iss",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "kid",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {},
  },
  bag: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "bag",
    friends: [],
    structs: {
      Bag: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "size",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      contains_with_type: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "bag",
              name: "Bag",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "bag",
              name: "Bag",
              typeArguments: [],
            },
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
    },
  },
  balance: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "balance",
    friends: [
      {
        address: "0x2",
        name: "sui",
      },
    ],
    structs: {
      Balance: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "value",
            type: "U64",
          },
        ],
      },
      Supply: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "value",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      create_supply: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Supply",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      decrease_supply: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: ["U64"],
      },
      destroy_supply: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Supply",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: ["U64"],
      },
      destroy_zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      increase_supply: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      join: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: ["U64"],
      },
      split: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      supply_value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      withdraw_all: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
    },
  },
  bcs: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "bcs",
    friends: [],
    structs: {
      BCS: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "bytes",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
    },
    exposedFunctions: {
      into_remainder_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "bcs",
              name: "BCS",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "bcs",
              name: "BCS",
              typeArguments: [],
            },
          },
        ],
      },
      peel_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      peel_bool: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      peel_enum_tag: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U32"],
      },
      peel_option_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
      peel_option_bool: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Bool"],
            },
          },
        ],
      },
      peel_option_u128: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U128"],
            },
          },
        ],
      },
      peel_option_u16: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U16"],
            },
          },
        ],
      },
      peel_option_u256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U256"],
            },
          },
        ],
      },
      peel_option_u32: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U32"],
            },
          },
        ],
      },
      peel_option_u64: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U64"],
            },
          },
        ],
      },
      peel_option_u8: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U8"],
            },
          },
        ],
      },
      peel_u128: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U128"],
      },
      peel_u16: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U16"],
      },
      peel_u256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U256"],
      },
      peel_u32: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U32"],
      },
      peel_u64: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      peel_u8: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U8"],
      },
      peel_vec_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "Address",
          },
        ],
      },
      peel_vec_bool: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "Bool",
          },
        ],
      },
      peel_vec_length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      peel_vec_u128: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U128",
          },
        ],
      },
      peel_vec_u16: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U16",
          },
        ],
      },
      peel_vec_u256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U256",
          },
        ],
      },
      peel_vec_u32: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U32",
          },
        ],
      },
      peel_vec_u64: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U64",
          },
        ],
      },
      peel_vec_u8: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      peel_vec_vec_u8: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bcs",
                name: "BCS",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: {
              Vector: "U8",
            },
          },
        ],
      },
      to_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
    },
  },
  bls12381: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "bls12381",
    friends: [],
    structs: {
      G1: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      G2: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      GT: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      Scalar: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      UncompressedG1: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
    },
    exposedFunctions: {
      bls12381_min_pk_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: ["Bool"],
      },
      bls12381_min_sig_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: ["Bool"],
      },
      g1_add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_div: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_generator: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_identity: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_mul: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_multi_scalar_multiplication: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      Struct: {
                        address: "0x2",
                        module: "bls12381",
                        name: "Scalar",
                        typeArguments: [],
                      },
                    },
                  ],
                },
              },
            },
          },
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      Struct: {
                        address: "0x2",
                        module: "bls12381",
                        name: "G1",
                        typeArguments: [],
                      },
                    },
                  ],
                },
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_neg: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_sub: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g1_to_uncompressed_g1: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "UncompressedG1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_div: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_generator: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_identity: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_mul: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_multi_scalar_multiplication: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      Struct: {
                        address: "0x2",
                        module: "bls12381",
                        name: "Scalar",
                        typeArguments: [],
                      },
                    },
                  ],
                },
              },
            },
          },
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      Struct: {
                        address: "0x2",
                        module: "bls12381",
                        name: "G2",
                        typeArguments: [],
                      },
                    },
                  ],
                },
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_neg: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      g2_sub: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_div: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_generator: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_identity: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_mul: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_neg: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      gt_sub: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "GT",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      hash_to_g1: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      hash_to_g2: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G2",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      pairing: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "G2",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "GT",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_div: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_from_u64: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64"],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_inv: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_mul: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_neg: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_one: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_sub: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "Scalar",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      scalar_zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "Scalar",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      uncompressed_g1_sum: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      Struct: {
                        address: "0x2",
                        module: "bls12381",
                        name: "UncompressedG1",
                        typeArguments: [],
                      },
                    },
                  ],
                },
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "UncompressedG1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      uncompressed_g1_to_g1: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "bls12381",
                      name: "UncompressedG1",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "bls12381",
                    name: "G1",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  },
  borrow: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "borrow",
    friends: [],
    structs: {
      Borrow: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "ref",
            type: "Address",
          },
          {
            name: "obj",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      Referent: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Store", "Key"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "id",
            type: "Address",
          },
          {
            name: "value",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "borrow",
                name: "Referent",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "borrow",
              name: "Borrow",
              typeArguments: [],
            },
          },
        ],
      },
      destroy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "borrow",
              name: "Referent",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "borrow",
              name: "Referent",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      put_back: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "borrow",
                name: "Referent",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "borrow",
              name: "Borrow",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
    },
  },
  clock: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "clock",
    friends: [],
    structs: {
      Clock: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "timestamp_ms",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      timestamp_ms: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "clock",
                name: "Clock",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
    },
  },
  coin: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "coin",
    friends: [],
    structs: {
      Coin: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "balance",
            type: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      CoinMetadata: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "decimals",
            type: "U8",
          },
          {
            name: "name",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "symbol",
            type: {
              Struct: {
                address: "0x1",
                module: "ascii",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "description",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "icon_url",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "url",
                      name: "Url",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      CurrencyCreated: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "decimals",
            type: "U8",
          },
        ],
      },
      DenyCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      DenyCapV2: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "allow_global_pause",
            type: "Bool",
          },
        ],
      },
      RegulatedCoinMetadata: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "coin_metadata_object",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "deny_cap_object",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      TreasuryCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "total_supply",
            type: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      balance: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      balance_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      burn: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: ["U64"],
      },
      create_currency: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "U8",
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "url",
                    name: "Url",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "TreasuryCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "CoinMetadata",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      create_regulated_currency: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "U8",
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "url",
                    name: "Url",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "TreasuryCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "DenyCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "CoinMetadata",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      create_regulated_currency_v2: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "U8",
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "url",
                    name: "Url",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
          "Bool",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "TreasuryCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "DenyCapV2",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "CoinMetadata",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      deny_list_add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "DenyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      deny_list_contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
        return: ["Bool"],
      },
      deny_list_remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "DenyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      deny_list_v2_add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "DenyCapV2",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      deny_list_v2_contains_current_epoch: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "Address",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      deny_list_v2_contains_next_epoch: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
        return: ["Bool"],
      },
      deny_list_v2_disable_global_pause: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "DenyCapV2",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      deny_list_v2_enable_global_pause: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "DenyCapV2",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      deny_list_v2_is_global_pause_enabled_current_epoch: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      deny_list_v2_is_global_pause_enabled_next_epoch: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      deny_list_v2_remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "DenyCapV2",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      destroy_zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      divide_into_n: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      from_balance: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      get_decimals: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U8"],
      },
      get_description: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      get_icon_url: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "url",
                    name: "Url",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      get_name: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      get_symbol: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      into_balance: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      join: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      migrate_regulated_currency_to_v2: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "DenyCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          "Bool",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "DenyCapV2",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      mint: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      mint_and_transfer: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      mint_balance: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Balance",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      put: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      split: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      supply: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      supply_immut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      supply_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Supply",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      take: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      total_supply: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      treasury_into_supply: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "TreasuryCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "balance",
              name: "Supply",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      update_description: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      update_icon_url: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      update_name: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      update_symbol: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "CoinMetadata",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
    },
  },
  config: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "config",
    friends: [
      {
        address: "0x2",
        name: "deny_list",
      },
    ],
    structs: {
      Config: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      Setting: {
        abilities: {
          abilities: ["Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "data",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "config",
                      name: "SettingData",
                      typeArguments: [
                        {
                          TypeParameter: 0,
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      SettingData: {
        abilities: {
          abilities: ["Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "newer_value_epoch",
            type: "U64",
          },
          {
            name: "newer_value",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            name: "older_value_opt",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      add_for_next_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "config",
                name: "Config",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
          {
            TypeParameter: 1,
          },
          {
            TypeParameter: 2,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  TypeParameter: 2,
                },
              ],
            },
          },
        ],
      },
      borrow_for_next_epoch_mut: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "config",
                name: "Config",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 2,
            },
          },
        ],
      },
      exists_with_type: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "config",
                name: "Config",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 1,
          },
        ],
        return: ["Bool"],
      },
      exists_with_type_for_next_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "config",
                name: "Config",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 1,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      new: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "config",
              name: "Config",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      read_setting: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          {
            TypeParameter: 0,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      read_setting_for_next_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "config",
                name: "Config",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  TypeParameter: 2,
                },
              ],
            },
          },
        ],
      },
      remove_for_next_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "config",
                name: "Config",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  TypeParameter: 2,
                },
              ],
            },
          },
        ],
      },
      share: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "config",
              name: "Config",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      transfer: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "config",
              name: "Config",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          "Address",
        ],
        return: [],
      },
    },
  },
  deny_list: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "deny_list",
    friends: [
      {
        address: "0x2",
        name: "coin",
      },
    ],
    structs: {
      AddressKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "pos0",
            type: "Address",
          },
        ],
      },
      ConfigKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "per_type_index",
            type: "U64",
          },
          {
            name: "per_type_key",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
      ConfigWriteCap: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      DenyList: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "lists",
            type: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
        ],
      },
      GlobalPauseKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      PerTypeConfigCreated: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "key",
            type: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "ConfigKey",
                typeArguments: [],
              },
            },
          },
          {
            name: "config_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      PerTypeList: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "denied_count",
            type: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: ["Address", "U64"],
              },
            },
          },
          {
            name: "denied_addresses",
            type: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                  {
                    Struct: {
                      address: "0x2",
                      module: "vec_set",
                      name: "VecSet",
                      typeArguments: ["Address"],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      migrate_v1_to_v2: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      v1_add: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
        ],
        return: [],
      },
      v1_contains: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
        ],
        return: ["Bool"],
      },
      v1_remove: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
        ],
        return: [],
      },
      v2_add: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      v2_contains_current_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      v2_contains_next_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
        ],
        return: ["Bool"],
      },
      v2_disable_global_pause: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      v2_enable_global_pause: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      v2_is_global_pause_enabled_current_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      v2_is_global_pause_enabled_next_epoch: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
        ],
        return: ["Bool"],
      },
      v2_remove: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "deny_list",
                name: "DenyList",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            Vector: "U8",
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
    },
  },
  derived_object: {
    fileFormatVersion: 7,
    address: "0x2",
    name: "derived_object",
    friends: [],
    structs: {
      Claimed: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "pos0",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      DerivedObjectKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "pos0",
            type: {
              TypeParameter: 0,
            },
          },
        ],
      },
    },
    enums: {
      ClaimedStatus: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        variants: {
          Reserved: [],
        },
        variantDeclarationOrder: ["Reserved"],
      },
    },
    exposedFunctions: {
      claim: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      derive_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Address"],
      },
      exists: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
    },
  },
  display: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "display",
    friends: [],
    structs: {
      Display: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "fields",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            name: "version",
            type: "U16",
          },
        ],
      },
      DisplayCreated: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      VersionUpdated: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "version",
            type: "U16",
          },
          {
            name: "fields",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      add_multiple: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Vector: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            Vector: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      create_and_keep: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      edit: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      fields: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      is_authorized: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "display",
              name: "Display",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      new_with_fields: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
          {
            Vector: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            Vector: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "display",
              name: "Display",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      update_version: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [],
      },
      version: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "display",
                name: "Display",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U16"],
      },
    },
  },
  dynamic_field: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "dynamic_field",
    friends: [
      {
        address: "0x2",
        name: "accumulator",
      },
      {
        address: "0x2",
        name: "config",
      },
      {
        address: "0x2",
        name: "derived_object",
      },
      {
        address: "0x2",
        name: "dynamic_object_field",
      },
    ],
    structs: {
      Field: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: false,
          },
          {
            constraints: {
              abilities: ["Store"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "name",
            type: {
              TypeParameter: 0,
            },
          },
          {
            name: "value",
            type: {
              TypeParameter: 1,
            },
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      add_child_object: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          "Address",
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_child_object: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
        return: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      borrow_child_object_mut: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      exists_: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      exists_with_type: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      field_info: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
      },
      field_info_mut: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
      },
      has_child_object: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address", "Address"],
        return: ["Bool"],
      },
      has_child_object_with_ty: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: ["Address", "Address"],
        return: ["Bool"],
      },
      hash_type_and_key: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          "Address",
          {
            TypeParameter: 0,
          },
        ],
        return: ["Address"],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
      remove_child_object: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: ["Address", "Address"],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      remove_if_exists: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
    },
  },
  dynamic_object_field: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "dynamic_object_field",
    friends: [
      {
        address: "0x2",
        name: "deny_list",
      },
    ],
    structs: {
      Wrapper: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "name",
            type: {
              TypeParameter: 0,
            },
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      exists_: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      exists_with_type: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "object",
                    name: "ID",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      internal_add: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      internal_borrow: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      internal_borrow_mut: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      internal_exists_with_type: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      internal_remove: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
    },
  },
  ecdsa_k1: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "ecdsa_k1",
    friends: [],
    structs: {},
    exposedFunctions: {
      decompress_pubkey: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      secp256k1_ecrecover: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          "U8",
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      secp256k1_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          "U8",
        ],
        return: ["Bool"],
      },
    },
  },
  ecdsa_r1: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "ecdsa_r1",
    friends: [],
    structs: {},
    exposedFunctions: {
      secp256r1_ecrecover: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          "U8",
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      secp256r1_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          "U8",
        ],
        return: ["Bool"],
      },
    },
  },
  ecvrf: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "ecvrf",
    friends: [],
    structs: {},
    exposedFunctions: {
      ecvrf_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: ["Bool"],
      },
    },
  },
  ed25519: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "ed25519",
    friends: [],
    structs: {},
    exposedFunctions: {
      ed25519_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: ["Bool"],
      },
    },
  },
  event: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "event",
    friends: [],
    structs: {},
    exposedFunctions: {
      emit: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
    },
  },
  groth16: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "groth16",
    friends: [],
    structs: {
      Curve: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: "U8",
          },
        ],
      },
      PreparedVerifyingKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "vk_gamma_abc_g1_bytes",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "alpha_g1_beta_g2_bytes",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "gamma_g2_neg_pc_bytes",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "delta_g2_neg_pc_bytes",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
      ProofPoints: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "bytes",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
      PublicProofInputs: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "bytes",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
    },
    exposedFunctions: {
      bls12381: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "Curve",
              typeArguments: [],
            },
          },
        ],
      },
      bn254: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "Curve",
              typeArguments: [],
            },
          },
        ],
      },
      prepare_verifying_key: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "groth16",
                name: "Curve",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "PreparedVerifyingKey",
              typeArguments: [],
            },
          },
        ],
      },
      proof_points_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "ProofPoints",
              typeArguments: [],
            },
          },
        ],
      },
      public_proof_inputs_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "PublicProofInputs",
              typeArguments: [],
            },
          },
        ],
      },
      pvk_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "PreparedVerifyingKey",
              typeArguments: [],
            },
          },
        ],
      },
      pvk_to_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "groth16",
              name: "PreparedVerifyingKey",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            Vector: {
              Vector: "U8",
            },
          },
        ],
      },
      verify_groth16_proof: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "groth16",
                name: "Curve",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "groth16",
                name: "PreparedVerifyingKey",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "groth16",
                name: "PublicProofInputs",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "groth16",
                name: "ProofPoints",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
    },
  },
  group_ops: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "group_ops",
    friends: [
      {
        address: "0x2",
        name: "bls12381",
      },
    ],
    structs: {
      Element: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "bytes",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
      },
      convert: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          "U8",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      div: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      equal: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      from_bytes: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Vector: "U8",
            },
          },
          "Bool",
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      hash_to: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      mul: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      multi_scalar_multiplication: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      TypeParameter: 0,
                    },
                  ],
                },
              },
            },
          },
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      TypeParameter: 1,
                    },
                  ],
                },
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      pairing: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 2,
                },
              ],
            },
          },
        ],
      },
      set_as_prefix: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          "U64",
          "Bool",
          {
            MutableReference: {
              Vector: "U8",
            },
          },
        ],
        return: [],
      },
      sub: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "group_ops",
                name: "Element",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      sum: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          "U8",
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "group_ops",
                  name: "Element",
                  typeArguments: [
                    {
                      TypeParameter: 0,
                    },
                  ],
                },
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "group_ops",
              name: "Element",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
    },
  },
  hash: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "hash",
    friends: [],
    structs: {},
    exposedFunctions: {
      blake2b256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      keccak256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
    },
  },
  hex: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "hex",
    friends: [],
    structs: {},
    exposedFunctions: {
      decode: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      encode: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
    },
  },
  hmac: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "hmac",
    friends: [],
    structs: {},
    exposedFunctions: {
      hmac_sha3_256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
    },
  },
  kiosk: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "kiosk",
    friends: [
      {
        address: "0x2",
        name: "kiosk_extension",
      },
    ],
    structs: {
      Borrow: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "kiosk_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "item_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      Item: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      ItemDelisted: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Store", "Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "kiosk",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      ItemListed: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Store", "Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "kiosk",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "price",
            type: "U64",
          },
        ],
      },
      ItemPurchased: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Store", "Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "kiosk",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "price",
            type: "U64",
          },
        ],
      },
      Kiosk: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "profits",
            type: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "sui",
                      name: "SUI",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            name: "owner",
            type: "Address",
          },
          {
            name: "item_count",
            type: "U32",
          },
          {
            name: "allow_extensions",
            type: "Bool",
          },
        ],
      },
      KioskOwnerCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "for",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      Listing: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "is_exclusive",
            type: "Bool",
          },
        ],
      },
      Lock: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      PurchaseCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Store", "Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "kiosk_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "item_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "min_price",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      borrow_val: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "Borrow",
              typeArguments: [],
            },
          },
        ],
      },
      close_and_withdraw: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "Kiosk",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "KioskOwnerCap",
              typeArguments: [],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      default: {
        visibility: "Private",
        isEntry: true,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      delist: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      has_access: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      has_item: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: ["Bool"],
      },
      has_item_with_type: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: ["Bool"],
      },
      is_listed: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: ["Bool"],
      },
      is_listed_exclusively: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: ["Bool"],
      },
      is_locked: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: ["Bool"],
      },
      item_count: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U32"],
      },
      kiosk_owner_cap_for: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      list: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          "U64",
        ],
        return: [],
      },
      list_with_purchase_cap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "PurchaseCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      lock: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      lock_internal: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "Kiosk",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "KioskOwnerCap",
              typeArguments: [],
            },
          },
        ],
      },
      owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      place: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      place_and_list: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          "U64",
        ],
        return: [],
      },
      place_internal: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      profits_amount: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      profits_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "sui",
                      name: "SUI",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      purchase: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      purchase_cap_item: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "PurchaseCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      purchase_cap_kiosk: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "PurchaseCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      purchase_cap_min_price: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "PurchaseCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      purchase_with_cap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "PurchaseCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      return_purchase_cap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "PurchaseCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      return_val: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "kiosk",
              name: "Borrow",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      set_allow_extensions: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          "Bool",
        ],
        return: [],
      },
      set_owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      set_owner_custom: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          "Address",
        ],
        return: [],
      },
      take: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      uid: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      uid_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      uid_mut_as_owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      uid_mut_internal: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      withdraw: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U64"],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  },
  kiosk_extension: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "kiosk_extension",
    friends: [],
    structs: {
      Extension: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "storage",
            type: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
          {
            name: "permissions",
            type: "U128",
          },
          {
            name: "is_enabled",
            type: "Bool",
          },
        ],
      },
      ExtensionKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
          "U128",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      can_lock: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      can_place: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      disable: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      enable: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      is_enabled: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      is_installed: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      lock: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 1,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [],
      },
      place: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 1,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "KioskOwnerCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      storage: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
        ],
      },
      storage_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "kiosk",
                name: "Kiosk",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "bag",
                name: "Bag",
                typeArguments: [],
              },
            },
          },
        ],
      },
    },
  },
  linked_table: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "linked_table",
    friends: [],
    structs: {
      LinkedTable: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: false,
          },
          {
            constraints: {
              abilities: ["Store"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "size",
            type: "U64",
          },
          {
            name: "head",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            name: "tail",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      Node: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: false,
          },
          {
            constraints: {
              abilities: ["Store"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "prev",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            name: "next",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            name: "value",
            type: {
              TypeParameter: 1,
            },
          },
        ],
      },
    },
    exposedFunctions: {
      back: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "linked_table",
              name: "LinkedTable",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [],
      },
      drop: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Drop", "Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "linked_table",
              name: "LinkedTable",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [],
      },
      front: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "linked_table",
              name: "LinkedTable",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      next: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      pop_back: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
      },
      pop_front: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
      },
      prev: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      push_back: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      push_front: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "linked_table",
                name: "LinkedTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
    },
  },
  math: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "math",
    friends: [],
    structs: {},
    exposedFunctions: {
      diff: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64", "U64"],
        return: ["U64"],
      },
      divide_and_round_up: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64", "U64"],
        return: ["U64"],
      },
      max: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64", "U64"],
        return: ["U64"],
      },
      min: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64", "U64"],
        return: ["U64"],
      },
      pow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64", "U8"],
        return: ["U64"],
      },
      sqrt: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U64"],
        return: ["U64"],
      },
      sqrt_u128: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["U128"],
        return: ["U128"],
      },
    },
  },
  nitro_attestation: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "nitro_attestation",
    friends: [],
    structs: {
      NitroAttestationDocument: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "module_id",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "timestamp",
            type: "U64",
          },
          {
            name: "digest",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "pcrs",
            type: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "nitro_attestation",
                  name: "PCREntry",
                  typeArguments: [],
                },
              },
            },
          },
          {
            name: "public_key",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                ],
              },
            },
          },
          {
            name: "user_data",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                ],
              },
            },
          },
          {
            name: "nonce",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                ],
              },
            },
          },
        ],
      },
      PCREntry: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "index",
            type: "U8",
          },
          {
            name: "value",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
    },
    exposedFunctions: {
      digest: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
      },
      index: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "PCREntry",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U8"],
      },
      load_nitro_attestation: {
        visibility: "Private",
        isEntry: true,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "clock",
                name: "Clock",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "nitro_attestation",
              name: "NitroAttestationDocument",
              typeArguments: [],
            },
          },
        ],
      },
      module_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
      },
      nonce: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                ],
              },
            },
          },
        ],
      },
      pcrs: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "nitro_attestation",
                  name: "PCREntry",
                  typeArguments: [],
                },
              },
            },
          },
        ],
      },
      public_key: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                ],
              },
            },
          },
        ],
      },
      timestamp: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: "U64",
          },
        ],
      },
      user_data: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "NitroAttestationDocument",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Vector: "U8",
                  },
                ],
              },
            },
          },
        ],
      },
      value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "nitro_attestation",
                name: "PCREntry",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
      },
    },
  },
  object: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "object",
    friends: [
      {
        address: "0x2",
        name: "accumulator",
      },
      {
        address: "0x2",
        name: "authenticator_state",
      },
      {
        address: "0x2",
        name: "clock",
      },
      {
        address: "0x2",
        name: "deny_list",
      },
      {
        address: "0x2",
        name: "derived_object",
      },
      {
        address: "0x2",
        name: "dynamic_field",
      },
      {
        address: "0x2",
        name: "random",
      },
    ],
    structs: {
      ID: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "bytes",
            type: "Address",
          },
        ],
      },
      UID: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      authenticator_state: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      borrow_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      clock: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      delete: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      id_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: ["Address"],
      },
      id_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      id_from_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      id_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      id_to_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      id_to_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      new_uid_from_hash: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      randomness_state: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      sui_accumulator_root_address: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: ["Address"],
      },
      sui_accumulator_root_object_id: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      sui_deny_list_object_id: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "UID",
              typeArguments: [],
            },
          },
        ],
      },
      uid_as_inner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      uid_to_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      uid_to_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      uid_to_inner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
    },
  },
  object_bag: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "object_bag",
    friends: [],
    structs: {
      ObjectBag: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "size",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      contains_with_type: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "object_bag",
              name: "ObjectBag",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object_bag",
              name: "ObjectBag",
              typeArguments: [],
            },
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
      value_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_bag",
                name: "ObjectBag",
                typeArguments: [],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "object",
                    name: "ID",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  },
  object_table: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "object_table",
    friends: [],
    structs: {
      ObjectTable: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: true,
          },
          {
            constraints: {
              abilities: ["Store", "Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "size",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "object_table",
              name: "ObjectTable",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object_table",
              name: "ObjectTable",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
      value_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object_table",
                name: "ObjectTable",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "object",
                    name: "ID",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  },
  package: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "package",
    friends: [],
    structs: {
      Publisher: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "package",
            type: {
              Struct: {
                address: "0x1",
                module: "ascii",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "module_name",
            type: {
              Struct: {
                address: "0x1",
                module: "ascii",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      UpgradeCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "package",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "version",
            type: "U64",
          },
          {
            name: "policy",
            type: "U8",
          },
        ],
      },
      UpgradeReceipt: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "cap",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "package",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      UpgradeTicket: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "cap",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "package",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "policy",
            type: "U8",
          },
          {
            name: "digest",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
    },
    exposedFunctions: {
      additive_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: ["U8"],
      },
      authorize_upgrade: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
          "U8",
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "package",
              name: "UpgradeTicket",
              typeArguments: [],
            },
          },
        ],
      },
      burn_publisher: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "package",
              name: "Publisher",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      claim: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "package",
              name: "Publisher",
              typeArguments: [],
            },
          },
        ],
      },
      claim_and_keep: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      commit_upgrade: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "package",
              name: "UpgradeReceipt",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      compatible_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: ["U8"],
      },
      dep_only_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: ["U8"],
      },
      from_module: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      from_package: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      make_immutable: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "package",
              name: "UpgradeCap",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      only_additive_upgrades: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      only_dep_upgrades: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      published_module: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "ascii",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      published_package: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "ascii",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      receipt_cap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeReceipt",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      receipt_package: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeReceipt",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      ticket_digest: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeTicket",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
      },
      ticket_package: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeTicket",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      ticket_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeTicket",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U8"],
      },
      upgrade_package: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      upgrade_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U8"],
      },
      version: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "UpgradeCap",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
    },
  },
  party: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "party",
    friends: [
      {
        address: "0x2",
        name: "transfer",
      },
    ],
    structs: {
      Party: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "default",
            type: {
              Struct: {
                address: "0x2",
                module: "party",
                name: "Permissions",
                typeArguments: [],
              },
            },
          },
          {
            name: "members",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  "Address",
                  {
                    Struct: {
                      address: "0x2",
                      module: "party",
                      name: "Permissions",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      Permissions: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "pos0",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      into_native: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "party",
              name: "Party",
              typeArguments: [],
            },
          },
        ],
        return: [
          "U64",
          {
            Vector: "Address",
          },
          {
            Vector: "U64",
          },
        ],
      },
      is_single_owner: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "party",
                name: "Party",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      single_owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: ["Address"],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "party",
              name: "Party",
              typeArguments: [],
            },
          },
        ],
      },
    },
  },
  pay: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "pay",
    friends: [],
    structs: {},
    exposedFunctions: {
      divide_and_keep: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      join: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      join_vec: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Vector: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [],
      },
      join_vec_and_transfer: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Vector: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "Address",
        ],
        return: [],
      },
      keep: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      split: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      split_and_transfer: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      split_vec: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "Coin",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Vector: "U64",
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
    },
  },
  poseidon: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "poseidon",
    friends: [],
    structs: {},
    exposedFunctions: {
      poseidon_bn254: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U256",
            },
          },
        ],
        return: ["U256"],
      },
    },
  },
  priority_queue: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "priority_queue",
    friends: [],
    structs: {
      Entry: {
        abilities: {
          abilities: ["Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Drop"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "priority",
            type: "U64",
          },
          {
            name: "value",
            type: {
              TypeParameter: 0,
            },
          },
        ],
      },
      PriorityQueue: {
        abilities: {
          abilities: ["Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Drop"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "entries",
            type: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "priority_queue",
                  name: "Entry",
                  typeArguments: [
                    {
                      TypeParameter: 0,
                    },
                  ],
                },
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      create_entries: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Vector: "U64",
          },
          {
            Vector: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Vector: {
              Struct: {
                address: "0x2",
                module: "priority_queue",
                name: "Entry",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      insert: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "priority_queue",
                name: "PriorityQueue",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Vector: {
              Struct: {
                address: "0x2",
                module: "priority_queue",
                name: "Entry",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "priority_queue",
              name: "PriorityQueue",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      new_entry: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          "U64",
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "priority_queue",
              name: "Entry",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      pop_max: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "priority_queue",
                name: "PriorityQueue",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          "U64",
          {
            TypeParameter: 0,
          },
        ],
      },
      priorities: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "priority_queue",
                name: "PriorityQueue",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Vector: "U64",
          },
        ],
      },
    },
  },
  prover: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "prover",
    friends: [],
    structs: {},
    exposedFunctions: {},
  },
  random: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "random",
    friends: [],
    structs: {
      Random: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "inner",
            type: {
              Struct: {
                address: "0x2",
                module: "versioned",
                name: "Versioned",
                typeArguments: [],
              },
            },
          },
        ],
      },
      RandomGenerator: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "seed",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "counter",
            type: "U16",
          },
          {
            name: "buffer",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
      RandomInner: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "version",
            type: "U64",
          },
          {
            name: "epoch",
            type: "U64",
          },
          {
            name: "randomness_round",
            type: "U64",
          },
          {
            name: "random_bytes",
            type: {
              Vector: "U8",
            },
          },
        ],
      },
    },
    exposedFunctions: {
      generate_bool: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      generate_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          "U16",
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      generate_u128: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U128"],
      },
      generate_u128_in_range: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          "U128",
          "U128",
        ],
        return: ["U128"],
      },
      generate_u16: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U16"],
      },
      generate_u16_in_range: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          "U16",
          "U16",
        ],
        return: ["U16"],
      },
      generate_u256: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U256"],
      },
      generate_u32: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U32"],
      },
      generate_u32_in_range: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          "U32",
          "U32",
        ],
        return: ["U32"],
      },
      generate_u64: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      generate_u64_in_range: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          "U64",
          "U64",
        ],
        return: ["U64"],
      },
      generate_u8: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U8"],
      },
      generate_u8_in_range: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          "U8",
          "U8",
        ],
        return: ["U8"],
      },
      new_generator: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "Random",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "random",
              name: "RandomGenerator",
              typeArguments: [],
            },
          },
        ],
      },
      shuffle: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "random",
                name: "RandomGenerator",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Vector: {
                TypeParameter: 0,
              },
            },
          },
        ],
        return: [],
      },
    },
  },
  sui: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "sui",
    friends: [],
    structs: {
      SUI: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
    },
    exposedFunctions: {
      transfer: {
        visibility: "Public",
        isEntry: true,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
          "Address",
        ],
        return: [],
      },
    },
  },
  table: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "table",
    friends: [],
    structs: {
      Table: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop", "Store"],
            },
            isPhantom: true,
          },
          {
            constraints: {
              abilities: ["Store"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "size",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      add: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: ["Bool"],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "table",
              name: "Table",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [],
      },
      drop: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Drop", "Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "table",
              name: "Table",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "table",
              name: "Table",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop", "Store"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            TypeParameter: 1,
          },
        ],
      },
    },
  },
  table_vec: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "table_vec",
    friends: [],
    structs: {
      TableVec: {
        abilities: {
          abilities: ["Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Store"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "contents",
            type: {
              Struct: {
                address: "0x2",
                module: "table",
                name: "Table",
                typeArguments: [
                  "U64",
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      borrow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      borrow_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "table_vec",
              name: "TableVec",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      drop: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop", "Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "table_vec",
              name: "TableVec",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "table_vec",
              name: "TableVec",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      pop_back: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      push_back: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      singleton: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "table_vec",
              name: "TableVec",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      swap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          "U64",
        ],
        return: [],
      },
      swap_remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "table_vec",
                name: "TableVec",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
    },
  },
  token: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "token",
    friends: [],
    structs: {
      ActionRequest: {
        abilities: {
          abilities: [],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "name",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "amount",
            type: "U64",
          },
          {
            name: "sender",
            type: "Address",
          },
          {
            name: "recipient",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: ["Address"],
              },
            },
          },
          {
            name: "spent_balance",
            type: {
              Struct: {
                address: "0x1",
                module: "option",
                name: "Option",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "balance",
                      name: "Balance",
                      typeArguments: [
                        {
                          TypeParameter: 0,
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
          {
            name: "approvals",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "type_name",
                      name: "TypeName",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      RuleKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "is_protected",
            type: "Bool",
          },
        ],
      },
      Token: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "balance",
            type: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
      },
      TokenPolicy: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "spent_balance",
            type: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            name: "rules",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "string",
                      name: "String",
                      typeArguments: [],
                    },
                  },
                  {
                    Struct: {
                      address: "0x2",
                      module: "vec_set",
                      name: "VecSet",
                      typeArguments: [
                        {
                          Struct: {
                            address: "0x1",
                            module: "type_name",
                            name: "TypeName",
                            typeArguments: [],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      TokenPolicyCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "for",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      TokenPolicyCreated: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "is_mutable",
            type: "Bool",
          },
        ],
      },
    },
    exposedFunctions: {
      action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      add_approval: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      add_rule_config: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 2,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      add_rule_for_action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      allow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      amount: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      approvals: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_set",
              name: "VecSet",
              typeArguments: [
                {
                  Struct: {
                    address: "0x1",
                    module: "type_name",
                    name: "TypeName",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      burn: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      confirm_request: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          "U64",
          "Address",
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
      confirm_request_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          "U64",
          "Address",
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
      confirm_with_policy_cap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          "U64",
          "Address",
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
      confirm_with_treasury_cap: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          "U64",
          "Address",
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
      destroy_zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      disallow: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      flush: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      from_coin: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      from_coin_action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      has_rule_config: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      has_rule_config_with_type: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      is_allowed: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      join: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "Token",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      keep: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      mint: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      new_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "coin",
                name: "TreasuryCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "TokenPolicy",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "TokenPolicyCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      new_request: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          "U64",
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "balance",
                    name: "Balance",
                    typeArguments: [
                      {
                        TypeParameter: 0,
                      },
                    ],
                  },
                },
              ],
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      recipient: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
      remove_rule_config: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: [],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 2,
          },
        ],
      },
      remove_rule_for_action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      rule_config: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 2,
            },
          },
        ],
      },
      rule_config_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 2,
            },
          },
        ],
      },
      rules: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_set",
              name: "VecSet",
              typeArguments: [
                {
                  Struct: {
                    address: "0x1",
                    module: "type_name",
                    name: "TypeName",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      sender: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Address"],
      },
      share_policy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "TokenPolicy",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [],
      },
      spend: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      spend_action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      spent: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "ActionRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U64"],
            },
          },
        ],
      },
      spent_balance: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "TokenPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      split: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "Token",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          "U64",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      to_coin: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      to_coin_action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      transfer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          "Address",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "ActionRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      transfer_action: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "token",
                name: "Token",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      zero: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "token",
              name: "Token",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
    },
  },
  transfer: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "transfer",
    friends: [],
    structs: {
      Receiving: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Key"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "version",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      freeze_object: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      freeze_object_impl: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      party_transfer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "party",
              name: "Party",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      party_transfer_impl: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "U64",
          {
            Vector: "Address",
          },
          {
            Vector: "U64",
          },
        ],
        return: [],
      },
      public_freeze_object: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      public_party_transfer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "party",
              name: "Party",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      public_receive: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer",
              name: "Receiving",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      public_share_object: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      public_transfer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store", "Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "Address",
        ],
        return: [],
      },
      receive: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer",
              name: "Receiving",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      receiving_object_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer",
                name: "Receiving",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      share_object: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      share_object_impl: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      transfer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "Address",
        ],
        return: [],
      },
      transfer_impl: {
        visibility: "Friend",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Key"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
          "Address",
        ],
        return: [],
      },
    },
  },
  transfer_policy: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "transfer_policy",
    friends: [],
    structs: {
      RuleKey: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Drop"],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "dummy_field",
            type: "Bool",
          },
        ],
      },
      TransferPolicy: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "balance",
            type: {
              Struct: {
                address: "0x2",
                module: "balance",
                name: "Balance",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x2",
                      module: "sui",
                      name: "SUI",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
          {
            name: "rules",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "type_name",
                      name: "TypeName",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      TransferPolicyCap: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "policy_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      TransferPolicyCreated: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      TransferPolicyDestroyed: {
        abilities: {
          abilities: ["Copy", "Drop"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      TransferRequest: {
        abilities: {
          abilities: [],
        },
        typeParameters: [
          {
            constraints: {
              abilities: [],
            },
            isPhantom: true,
          },
        ],
        fields: [
          {
            name: "item",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "paid",
            type: "U64",
          },
          {
            name: "from",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "receipts",
            type: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "type_name",
                      name: "TypeName",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      add_receipt: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [],
      },
      add_rule: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Drop", "Store"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 2,
          },
        ],
        return: [],
      },
      add_to_balance: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
        return: [],
      },
      confirm_request: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          "U64",
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      default: {
        visibility: "Private",
        isEntry: true,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
      destroy_and_withdraw: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferPolicy",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferPolicyCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
      from: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      get_rule: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Drop", "Store"],
          },
        ],
        parameters: [
          {
            TypeParameter: 1,
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 2,
            },
          },
        ],
      },
      has_rule: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      item: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
      },
      new: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "package",
                name: "Publisher",
                typeArguments: [],
              },
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferPolicy",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferPolicyCap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      new_request: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
          "U64",
          {
            Struct: {
              address: "0x2",
              module: "object",
              name: "ID",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "transfer_policy",
              name: "TransferRequest",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      paid: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferRequest",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      remove_rule: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
          {
            abilities: ["Drop"],
          },
          {
            abilities: ["Drop", "Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [],
      },
      rules: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    Struct: {
                      address: "0x1",
                      module: "type_name",
                      name: "TypeName",
                      typeArguments: [],
                    },
                  },
                ],
              },
            },
          },
        ],
      },
      uid: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      uid_mut_as_owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
        ],
      },
      withdraw: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicy",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "transfer_policy",
                name: "TransferPolicyCap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U64"],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "coin",
              name: "Coin",
              typeArguments: [
                {
                  Struct: {
                    address: "0x2",
                    module: "sui",
                    name: "SUI",
                    typeArguments: [],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  },
  tx_context: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "tx_context",
    friends: [],
    structs: {
      TxContext: {
        abilities: {
          abilities: ["Drop"],
        },
        typeParameters: [],
        fields: [
          {
            name: "sender",
            type: "Address",
          },
          {
            name: "tx_hash",
            type: {
              Vector: "U8",
            },
          },
          {
            name: "epoch",
            type: "U64",
          },
          {
            name: "epoch_timestamp_ms",
            type: "U64",
          },
          {
            name: "ids_created",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      digest: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
      },
      epoch: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      epoch_timestamp_ms: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      fresh_object_address: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      gas_price: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      reference_gas_price: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
      sender: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      sponsor: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["Address"],
            },
          },
        ],
      },
    },
  },
  types: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "types",
    friends: [],
    structs: {},
    exposedFunctions: {
      is_one_time_witness: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: ["Bool"],
      },
    },
  },
  url: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "url",
    friends: [],
    structs: {
      Url: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [],
        fields: [
          {
            name: "url",
            type: {
              Struct: {
                address: "0x1",
                module: "ascii",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      inner_url: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "url",
                name: "Url",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
      },
      new_unsafe: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "url",
              name: "Url",
              typeArguments: [],
            },
          },
        ],
      },
      new_unsafe_from_bytes: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Vector: "U8",
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "url",
              name: "Url",
              typeArguments: [],
            },
          },
        ],
      },
      update: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "url",
                name: "Url",
                typeArguments: [],
              },
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "ascii",
              name: "String",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
    },
  },
  vdf: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "vdf",
    friends: [],
    structs: {},
    exposedFunctions: {
      hash_to_input: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
        ],
        return: [
          {
            Vector: "U8",
          },
        ],
      },
      vdf_verify: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          {
            Reference: {
              Vector: "U8",
            },
          },
          "U64",
        ],
        return: ["Bool"],
      },
    },
  },
  vec_map: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "vec_map",
    friends: [],
    structs: {
      Entry: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy"],
            },
            isPhantom: false,
          },
          {
            constraints: {
              abilities: [],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "key",
            type: {
              TypeParameter: 0,
            },
          },
          {
            name: "value",
            type: {
              TypeParameter: 1,
            },
          },
        ],
      },
      VecMap: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy"],
            },
            isPhantom: false,
          },
          {
            constraints: {
              abilities: [],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "contents",
            type: {
              Vector: {
                Struct: {
                  address: "0x2",
                  module: "vec_map",
                  name: "Entry",
                  typeArguments: [
                    {
                      TypeParameter: 0,
                    },
                    {
                      TypeParameter: 1,
                    },
                  ],
                },
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: ["Bool"],
      },
      destroy_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "vec_map",
              name: "VecMap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [],
      },
      empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_map",
              name: "VecMap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      from_keys_values: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Vector: {
              TypeParameter: 0,
            },
          },
          {
            Vector: {
              TypeParameter: 1,
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_map",
              name: "VecMap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
      get: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      get_entry_by_idx: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
          {
            Reference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      get_entry_by_idx_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      get_idx: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: ["U64"],
      },
      get_idx_opt: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: ["U64"],
            },
          },
        ],
      },
      get_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 1,
            },
          },
        ],
      },
      insert: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
        return: [],
      },
      into_keys_values: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "vec_map",
              name: "VecMap",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
        return: [
          {
            Vector: {
              TypeParameter: 0,
            },
          },
          {
            Vector: {
              TypeParameter: 1,
            },
          },
        ],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      keys: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Vector: {
              TypeParameter: 0,
            },
          },
        ],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      pop: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
      },
      remove_entry_by_idx: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          "U64",
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            TypeParameter: 1,
          },
        ],
      },
      size: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: [],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      try_get: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy"],
          },
          {
            abilities: ["Copy"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_map",
                name: "VecMap",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                  {
                    TypeParameter: 1,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x1",
              module: "option",
              name: "Option",
              typeArguments: [
                {
                  TypeParameter: 1,
                },
              ],
            },
          },
        ],
      },
    },
  },
  vec_set: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "vec_set",
    friends: [],
    structs: {
      VecSet: {
        abilities: {
          abilities: ["Copy", "Drop", "Store"],
        },
        typeParameters: [
          {
            constraints: {
              abilities: ["Copy", "Drop"],
            },
            isPhantom: false,
          },
        ],
        fields: [
          {
            name: "contents",
            type: {
              Vector: {
                TypeParameter: 0,
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      contains: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: ["Bool"],
      },
      empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_set",
              name: "VecSet",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      from_keys: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Vector: {
              TypeParameter: 0,
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_set",
              name: "VecSet",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      insert: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            TypeParameter: 0,
          },
        ],
        return: [],
      },
      into_keys: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "vec_set",
              name: "VecSet",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
        return: [
          {
            Vector: {
              TypeParameter: 0,
            },
          },
        ],
      },
      is_empty: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      keys: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Vector: {
                TypeParameter: 0,
              },
            },
          },
        ],
      },
      length: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
      remove: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
        return: [],
      },
      singleton: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            TypeParameter: 0,
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "vec_set",
              name: "VecSet",
              typeArguments: [
                {
                  TypeParameter: 0,
                },
              ],
            },
          },
        ],
      },
      size: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Copy", "Drop"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "vec_set",
                name: "VecSet",
                typeArguments: [
                  {
                    TypeParameter: 0,
                  },
                ],
              },
            },
          },
        ],
        return: ["U64"],
      },
    },
  },
  versioned: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "versioned",
    friends: [],
    structs: {
      VersionChangeCap: {
        abilities: {
          abilities: [],
        },
        typeParameters: [],
        fields: [
          {
            name: "versioned_id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "ID",
                typeArguments: [],
              },
            },
          },
          {
            name: "old_version",
            type: "U64",
          },
        ],
      },
      Versioned: {
        abilities: {
          abilities: ["Store", "Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "version",
            type: "U64",
          },
        ],
      },
    },
    exposedFunctions: {
      create: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          "U64",
          {
            TypeParameter: 0,
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Struct: {
              address: "0x2",
              module: "versioned",
              name: "Versioned",
              typeArguments: [],
            },
          },
        ],
      },
      destroy: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "versioned",
              name: "Versioned",
              typeArguments: [],
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
        ],
      },
      load_value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "versioned",
                name: "Versioned",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      load_value_mut: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "versioned",
                name: "Versioned",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            MutableReference: {
              TypeParameter: 0,
            },
          },
        ],
      },
      remove_value_for_upgrade: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "versioned",
                name: "Versioned",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "versioned",
              name: "VersionChangeCap",
              typeArguments: [],
            },
          },
        ],
      },
      upgrade: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [
          {
            abilities: ["Store"],
          },
        ],
        parameters: [
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "versioned",
                name: "Versioned",
                typeArguments: [],
              },
            },
          },
          "U64",
          {
            TypeParameter: 0,
          },
          {
            Struct: {
              address: "0x2",
              module: "versioned",
              name: "VersionChangeCap",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      version: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "versioned",
                name: "Versioned",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["U64"],
      },
    },
  },
  zklogin_verified_id: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "zklogin_verified_id",
    friends: [],
    structs: {
      VerifiedID: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "owner",
            type: "Address",
          },
          {
            name: "key_claim_name",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "key_claim_value",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "issuer",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            name: "audience",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      audience: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_id",
                name: "VerifiedID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      check_zklogin_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          "Address",
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
          "U256",
        ],
        return: ["Bool"],
      },
      delete: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "zklogin_verified_id",
              name: "VerifiedID",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      issuer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_id",
                name: "VerifiedID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      key_claim_name: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_id",
                name: "VerifiedID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      key_claim_value: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_id",
                name: "VerifiedID",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_id",
                name: "VerifiedID",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      verify_zklogin_id: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          "U256",
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
    },
  },
  zklogin_verified_issuer: {
    fileFormatVersion: 6,
    address: "0x2",
    name: "zklogin_verified_issuer",
    friends: [],
    structs: {
      VerifiedIssuer: {
        abilities: {
          abilities: ["Key"],
        },
        typeParameters: [],
        fields: [
          {
            name: "id",
            type: {
              Struct: {
                address: "0x2",
                module: "object",
                name: "UID",
                typeArguments: [],
              },
            },
          },
          {
            name: "owner",
            type: "Address",
          },
          {
            name: "issuer",
            type: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
    },
    exposedFunctions: {
      check_zklogin_issuer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          "Address",
          "U256",
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Bool"],
      },
      delete: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Struct: {
              address: "0x2",
              module: "zklogin_verified_issuer",
              name: "VerifiedIssuer",
              typeArguments: [],
            },
          },
        ],
        return: [],
      },
      issuer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_issuer",
                name: "VerifiedIssuer",
                typeArguments: [],
              },
            },
          },
        ],
        return: [
          {
            Reference: {
              Struct: {
                address: "0x1",
                module: "string",
                name: "String",
                typeArguments: [],
              },
            },
          },
        ],
      },
      owner: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          {
            Reference: {
              Struct: {
                address: "0x2",
                module: "zklogin_verified_issuer",
                name: "VerifiedIssuer",
                typeArguments: [],
              },
            },
          },
        ],
        return: ["Address"],
      },
      verify_zklogin_issuer: {
        visibility: "Public",
        isEntry: false,
        typeParameters: [],
        parameters: [
          "U256",
          {
            Struct: {
              address: "0x1",
              module: "string",
              name: "String",
              typeArguments: [],
            },
          },
          {
            MutableReference: {
              Struct: {
                address: "0x2",
                module: "tx_context",
                name: "TxContext",
                typeArguments: [],
              },
            },
          },
        ],
        return: [],
      },
    },
  },
} as const;

export type SuiModules = typeof suiAbi;

// Generated TypeScript interfaces
export interface AccumulatorAccumulatorRootType {
  id: { id: string };
}

export interface AccumulatorKeyType {
  address: string;
}

export interface AccumulatorU128Type {
  value: string;
}

export interface Accumulator_metadataMetadataType {
  fields: unknown;
}

export interface Accumulator_metadataMetadataKeyType {
  dummy_field: boolean;
}

export interface Accumulator_metadataOwnerType {
  balances: unknown;
  owner: string;
}

export interface Accumulator_metadataOwnerKeyType {
  owner: string;
}

export interface Authenticator_stateActiveJwkType {
  jwk_id: unknown;
  jwk: unknown;
  epoch: string;
}

export interface Authenticator_stateAuthenticatorStateType {
  id: { id: string };
  version: string;
}

export interface Authenticator_stateAuthenticatorStateInnerType {
  version: string;
  active_jwks: unknown[];
}

export interface Authenticator_stateJWKType {
  kty: string;
  e: string;
  n: string;
  alg: string;
}

export interface Authenticator_stateJwkIdType {
  iss: string;
  kid: string;
}

export interface BagBagType {
  id: { id: string };
  size: string;
}

export interface BalanceBalanceType {
  value: string;
}

export interface BalanceSupplyType {
  value: string;
}

export interface BcsBCSType {
  bytes: Uint8Array;
}

export interface Bls12381G1Type {
  dummy_field: boolean;
}

export interface Bls12381G2Type {
  dummy_field: boolean;
}

export interface Bls12381GTType {
  dummy_field: boolean;
}

export interface Bls12381ScalarType {
  dummy_field: boolean;
}

export interface Bls12381UncompressedG1Type {
  dummy_field: boolean;
}

export interface BorrowBorrowType {
  ref: string;
  obj: unknown;
}

export interface BorrowReferentType {
  id: string;
  value: unknown;
}

export interface ClockClockType {
  id: { id: string };
  timestamp_ms: string;
}

export interface CoinCoinType {
  id: { id: string };
  balance: unknown;
}

export interface CoinCoinMetadataType {
  id: { id: string };
  decimals: number;
  name: string;
  symbol: unknown;
  description: string;
  icon_url: unknown;
}

export interface CoinCurrencyCreatedType {
  decimals: number;
}

export interface CoinDenyCapType {
  id: { id: string };
}

export interface CoinDenyCapV2Type {
  id: { id: string };
  allow_global_pause: boolean;
}

export interface CoinRegulatedCoinMetadataType {
  id: { id: string };
  coin_metadata_object: unknown;
  deny_cap_object: unknown;
}

export interface CoinTreasuryCapType {
  id: { id: string };
  total_supply: unknown;
}

export interface ConfigConfigType {
  id: { id: string };
}

export interface ConfigSettingType {
  data: unknown;
}

export interface ConfigSettingDataType {
  newer_value_epoch: string;
  newer_value: unknown;
  older_value_opt: unknown;
}

export interface Deny_listAddressKeyType {
  pos0: string;
}

export interface Deny_listConfigKeyType {
  per_type_index: string;
  per_type_key: Uint8Array;
}

export interface Deny_listConfigWriteCapType {
  dummy_field: boolean;
}

export interface Deny_listDenyListType {
  id: { id: string };
  lists: unknown;
}

export interface Deny_listGlobalPauseKeyType {
  dummy_field: boolean;
}

export interface Deny_listPerTypeConfigCreatedType {
  key: unknown;
  config_id: unknown;
}

export interface Deny_listPerTypeListType {
  id: { id: string };
  denied_count: { id: string };
  denied_addresses: { id: string };
}

export interface Derived_objectClaimedType {
  pos0: unknown;
}

export interface Derived_objectDerivedObjectKeyType {
  pos0: unknown;
}

export interface DisplayDisplayType {
  id: { id: string };
  fields: unknown;
  version: number;
}

export interface DisplayDisplayCreatedType {
  id: unknown;
}

export interface DisplayVersionUpdatedType {
  id: unknown;
  version: number;
  fields: unknown;
}

export interface Dynamic_fieldFieldType {
  id: { id: string };
  name: unknown;
  value: unknown;
}

export interface Dynamic_object_fieldWrapperType {
  name: unknown;
}

export interface Groth16CurveType {
  id: number;
}

export interface Groth16PreparedVerifyingKeyType {
  vk_gamma_abc_g1_bytes: Uint8Array;
  alpha_g1_beta_g2_bytes: Uint8Array;
  gamma_g2_neg_pc_bytes: Uint8Array;
  delta_g2_neg_pc_bytes: Uint8Array;
}

export interface Groth16ProofPointsType {
  bytes: Uint8Array;
}

export interface Groth16PublicProofInputsType {
  bytes: Uint8Array;
}

export interface Group_opsElementType {
  bytes: Uint8Array;
}

export interface KioskBorrowType {
  kiosk_id: unknown;
  item_id: unknown;
}

export interface KioskItemType {
  id: unknown;
}

export interface KioskItemDelistedType {
  kiosk: unknown;
  id: unknown;
}

export interface KioskItemListedType {
  kiosk: unknown;
  id: unknown;
  price: string;
}

export interface KioskItemPurchasedType {
  kiosk: unknown;
  id: unknown;
  price: string;
}

export interface KioskKioskType {
  id: { id: string };
  profits: unknown;
  owner: string;
  item_count: number;
  allow_extensions: boolean;
}

export interface KioskKioskOwnerCapType {
  id: { id: string };
  for: unknown;
}

export interface KioskListingType {
  id: unknown;
  is_exclusive: boolean;
}

export interface KioskLockType {
  id: unknown;
}

export interface KioskPurchaseCapType {
  id: { id: string };
  kiosk_id: unknown;
  item_id: unknown;
  min_price: string;
}

export interface Kiosk_extensionExtensionType {
  storage: unknown;
  permissions: string;
  is_enabled: boolean;
}

export interface Kiosk_extensionExtensionKeyType {
  dummy_field: boolean;
}

export interface Linked_tableLinkedTableType {
  id: { id: string };
  size: string;
  head: unknown;
  tail: unknown;
}

export interface Linked_tableNodeType {
  prev: unknown;
  next: unknown;
  value: unknown;
}

export interface Nitro_attestationNitroAttestationDocumentType {
  module_id: Uint8Array;
  timestamp: string;
  digest: Uint8Array;
  pcrs: unknown[];
  public_key: unknown;
  user_data: unknown;
  nonce: unknown;
}

export interface Nitro_attestationPCREntryType {
  index: number;
  value: Uint8Array;
}

export interface ObjectIDType {
  bytes: string;
}

export interface ObjectUIDType {
  id: unknown;
}

export interface Object_bagObjectBagType {
  id: { id: string };
  size: string;
}

export interface Object_tableObjectTableType {
  id: { id: string };
  size: string;
}

export interface PackagePublisherType {
  id: { id: string };
  package: unknown;
  module_name: unknown;
}

export interface PackageUpgradeCapType {
  id: { id: string };
  package: unknown;
  version: string;
  policy: number;
}

export interface PackageUpgradeReceiptType {
  cap: unknown;
  package: unknown;
}

export interface PackageUpgradeTicketType {
  cap: unknown;
  package: unknown;
  policy: number;
  digest: Uint8Array;
}

export interface PartyPartyType {
  default: unknown;
  members: unknown;
}

export interface PartyPermissionsType {
  pos0: string;
}

export interface Priority_queueEntryType {
  priority: string;
  value: unknown;
}

export interface Priority_queuePriorityQueueType {
  entries: unknown[];
}

export interface RandomRandomType {
  id: { id: string };
  inner: unknown;
}

export interface RandomRandomGeneratorType {
  seed: Uint8Array;
  counter: number;
  buffer: Uint8Array;
}

export interface RandomRandomInnerType {
  version: string;
  epoch: string;
  randomness_round: string;
  random_bytes: Uint8Array;
}

export interface SuiSUIType {
  dummy_field: boolean;
}

export interface TableTableType {
  id: { id: string };
  size: string;
}

export interface Table_vecTableVecType {
  contents: { id: string };
}

export interface TokenActionRequestType {
  name: string;
  amount: string;
  sender: string;
  recipient: unknown;
  spent_balance: unknown;
  approvals: unknown[];
}

export interface TokenRuleKeyType {
  is_protected: boolean;
}

export interface TokenTokenType {
  id: { id: string };
  balance: unknown;
}

export interface TokenTokenPolicyType {
  id: { id: string };
  spent_balance: unknown;
  rules: unknown;
}

export interface TokenTokenPolicyCapType {
  id: { id: string };
  for: unknown;
}

export interface TokenTokenPolicyCreatedType {
  id: unknown;
  is_mutable: boolean;
}

export interface TransferReceivingType {
  id: unknown;
  version: string;
}

export interface Transfer_policyRuleKeyType {
  dummy_field: boolean;
}

export interface Transfer_policyTransferPolicyType {
  id: { id: string };
  balance: unknown;
  rules: unknown[];
}

export interface Transfer_policyTransferPolicyCapType {
  id: { id: string };
  policy_id: unknown;
}

export interface Transfer_policyTransferPolicyCreatedType {
  id: unknown;
}

export interface Transfer_policyTransferPolicyDestroyedType {
  id: unknown;
}

export interface Transfer_policyTransferRequestType {
  item: unknown;
  paid: string;
  from: unknown;
  receipts: unknown[];
}

export interface Tx_contextTxContextType {
  sender: string;
  tx_hash: Uint8Array;
  epoch: string;
  epoch_timestamp_ms: string;
  ids_created: string;
}

export interface UrlUrlType {
  url: unknown;
}

export interface Vec_mapEntryType {
  key: unknown;
  value: unknown;
}

export interface Vec_mapVecMapType {
  contents: unknown[];
}

export interface Vec_setVecSetType {
  contents: unknown[];
}

export interface VersionedVersionChangeCapType {
  versioned_id: unknown;
  old_version: string;
}

export interface VersionedVersionedType {
  id: { id: string };
  version: string;
}

export interface Zklogin_verified_idVerifiedIDType {
  id: { id: string };
  owner: string;
  key_claim_name: string;
  key_claim_value: string;
  issuer: string;
  audience: string;
}

export interface Zklogin_verified_issuerVerifiedIssuerType {
  id: { id: string };
  owner: string;
  issuer: string;
}

// Generated type guards
export function isAccumulatorAccumulatorRootType(
  data: unknown,
): data is AccumulatorAccumulatorRootType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAccumulatorKeyType(data: unknown): data is AccumulatorKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["address"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["address"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAccumulatorU128Type(data: unknown): data is AccumulatorU128Type {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["value"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAccumulator_metadataMetadataType(
  data: unknown,
): data is Accumulator_metadataMetadataType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["fields"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAccumulator_metadataMetadataKeyType(
  data: unknown,
): data is Accumulator_metadataMetadataKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAccumulator_metadataOwnerType(
  data: unknown,
): data is Accumulator_metadataOwnerType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["balances", "owner"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["owner"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAccumulator_metadataOwnerKeyType(
  data: unknown,
): data is Accumulator_metadataOwnerKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["owner"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["owner"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAuthenticator_stateActiveJwkType(
  data: unknown,
): data is Authenticator_stateActiveJwkType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["jwk_id", "jwk", "epoch"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["epoch"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAuthenticator_stateAuthenticatorStateType(
  data: unknown,
): data is Authenticator_stateAuthenticatorStateType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "version"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["version"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAuthenticator_stateAuthenticatorStateInnerType(
  data: unknown,
): data is Authenticator_stateAuthenticatorStateInnerType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["version", "active_jwks"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["version"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAuthenticator_stateJWKType(data: unknown): data is Authenticator_stateJWKType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["kty", "e", "n", "alg"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["kty", "e", "n", "alg"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isAuthenticator_stateJwkIdType(
  data: unknown,
): data is Authenticator_stateJwkIdType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["iss", "kid"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["iss", "kid"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBagBagType(data: unknown): data is BagBagType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "size"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["size"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBalanceBalanceType(data: unknown): data is BalanceBalanceType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["value"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBalanceSupplyType(data: unknown): data is BalanceSupplyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["value"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBcsBCSType(data: unknown): data is BcsBCSType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["bytes"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBls12381G1Type(data: unknown): data is Bls12381G1Type {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBls12381G2Type(data: unknown): data is Bls12381G2Type {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBls12381GTType(data: unknown): data is Bls12381GTType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBls12381ScalarType(data: unknown): data is Bls12381ScalarType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBls12381UncompressedG1Type(data: unknown): data is Bls12381UncompressedG1Type {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBorrowBorrowType(data: unknown): data is BorrowBorrowType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["ref", "obj"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["ref"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isBorrowReferentType(data: unknown): data is BorrowReferentType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["id"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isClockClockType(data: unknown): data is ClockClockType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "timestamp_ms"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["timestamp_ms"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinCoinType(data: unknown): data is CoinCoinType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "balance"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinCoinMetadataType(data: unknown): data is CoinCoinMetadataType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "decimals", "name", "symbol", "description", "icon_url"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["name", "description"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinCurrencyCreatedType(data: unknown): data is CoinCurrencyCreatedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["decimals"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinDenyCapType(data: unknown): data is CoinDenyCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinDenyCapV2Type(data: unknown): data is CoinDenyCapV2Type {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "allow_global_pause"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinRegulatedCoinMetadataType(
  data: unknown,
): data is CoinRegulatedCoinMetadataType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "coin_metadata_object", "deny_cap_object"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isCoinTreasuryCapType(data: unknown): data is CoinTreasuryCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "total_supply"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isConfigConfigType(data: unknown): data is ConfigConfigType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isConfigSettingType(data: unknown): data is ConfigSettingType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["data"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isConfigSettingDataType(data: unknown): data is ConfigSettingDataType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["newer_value_epoch", "newer_value", "older_value_opt"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["newer_value_epoch"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listAddressKeyType(data: unknown): data is Deny_listAddressKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["pos0"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["pos0"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listConfigKeyType(data: unknown): data is Deny_listConfigKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["per_type_index", "per_type_key"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["per_type_index"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listConfigWriteCapType(data: unknown): data is Deny_listConfigWriteCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listDenyListType(data: unknown): data is Deny_listDenyListType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "lists"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listGlobalPauseKeyType(data: unknown): data is Deny_listGlobalPauseKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listPerTypeConfigCreatedType(
  data: unknown,
): data is Deny_listPerTypeConfigCreatedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["key", "config_id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDeny_listPerTypeListType(data: unknown): data is Deny_listPerTypeListType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "denied_count", "denied_addresses"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDerived_objectClaimedType(data: unknown): data is Derived_objectClaimedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["pos0"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDerived_objectDerivedObjectKeyType(
  data: unknown,
): data is Derived_objectDerivedObjectKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["pos0"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDisplayDisplayType(data: unknown): data is DisplayDisplayType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "fields", "version"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDisplayDisplayCreatedType(data: unknown): data is DisplayDisplayCreatedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDisplayVersionUpdatedType(data: unknown): data is DisplayVersionUpdatedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "version", "fields"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDynamic_fieldFieldType(data: unknown): data is Dynamic_fieldFieldType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "name", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isDynamic_object_fieldWrapperType(
  data: unknown,
): data is Dynamic_object_fieldWrapperType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["name"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isGroth16CurveType(data: unknown): data is Groth16CurveType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isGroth16PreparedVerifyingKeyType(
  data: unknown,
): data is Groth16PreparedVerifyingKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = [
    "vk_gamma_abc_g1_bytes",
    "alpha_g1_beta_g2_bytes",
    "gamma_g2_neg_pc_bytes",
    "delta_g2_neg_pc_bytes",
  ];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isGroth16ProofPointsType(data: unknown): data is Groth16ProofPointsType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["bytes"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isGroth16PublicProofInputsType(
  data: unknown,
): data is Groth16PublicProofInputsType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["bytes"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isGroup_opsElementType(data: unknown): data is Group_opsElementType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["bytes"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskBorrowType(data: unknown): data is KioskBorrowType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["kiosk_id", "item_id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskItemType(data: unknown): data is KioskItemType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskItemDelistedType(data: unknown): data is KioskItemDelistedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["kiosk", "id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskItemListedType(data: unknown): data is KioskItemListedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["kiosk", "id", "price"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["price"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskItemPurchasedType(data: unknown): data is KioskItemPurchasedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["kiosk", "id", "price"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["price"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskKioskType(data: unknown): data is KioskKioskType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "profits", "owner", "item_count", "allow_extensions"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["owner"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskKioskOwnerCapType(data: unknown): data is KioskKioskOwnerCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "for"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskListingType(data: unknown): data is KioskListingType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "is_exclusive"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskLockType(data: unknown): data is KioskLockType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKioskPurchaseCapType(data: unknown): data is KioskPurchaseCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "kiosk_id", "item_id", "min_price"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["min_price"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKiosk_extensionExtensionType(
  data: unknown,
): data is Kiosk_extensionExtensionType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["storage", "permissions", "is_enabled"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["permissions"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isKiosk_extensionExtensionKeyType(
  data: unknown,
): data is Kiosk_extensionExtensionKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isLinked_tableLinkedTableType(data: unknown): data is Linked_tableLinkedTableType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "size", "head", "tail"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["size"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isLinked_tableNodeType(data: unknown): data is Linked_tableNodeType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["prev", "next", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isNitro_attestationNitroAttestationDocumentType(
  data: unknown,
): data is Nitro_attestationNitroAttestationDocumentType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = [
    "module_id",
    "timestamp",
    "digest",
    "pcrs",
    "public_key",
    "user_data",
    "nonce",
  ];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["timestamp"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isNitro_attestationPCREntryType(
  data: unknown,
): data is Nitro_attestationPCREntryType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["index", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isObjectIDType(data: unknown): data is ObjectIDType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["bytes"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["bytes"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isObjectUIDType(data: unknown): data is ObjectUIDType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isObject_bagObjectBagType(data: unknown): data is Object_bagObjectBagType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "size"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["size"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isObject_tableObjectTableType(data: unknown): data is Object_tableObjectTableType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "size"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["size"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPackagePublisherType(data: unknown): data is PackagePublisherType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "package", "module_name"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPackageUpgradeCapType(data: unknown): data is PackageUpgradeCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "package", "version", "policy"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["version"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPackageUpgradeReceiptType(data: unknown): data is PackageUpgradeReceiptType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["cap", "package"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPackageUpgradeTicketType(data: unknown): data is PackageUpgradeTicketType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["cap", "package", "policy", "digest"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPartyPartyType(data: unknown): data is PartyPartyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["default", "members"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPartyPermissionsType(data: unknown): data is PartyPermissionsType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["pos0"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["pos0"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPriority_queueEntryType(data: unknown): data is Priority_queueEntryType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["priority", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["priority"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isPriority_queuePriorityQueueType(
  data: unknown,
): data is Priority_queuePriorityQueueType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["entries"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isRandomRandomType(data: unknown): data is RandomRandomType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "inner"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isRandomRandomGeneratorType(data: unknown): data is RandomRandomGeneratorType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["seed", "counter", "buffer"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isRandomRandomInnerType(data: unknown): data is RandomRandomInnerType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["version", "epoch", "randomness_round", "random_bytes"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["version", "epoch", "randomness_round"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isSuiSUIType(data: unknown): data is SuiSUIType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTableTableType(data: unknown): data is TableTableType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "size"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["size"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTable_vecTableVecType(data: unknown): data is Table_vecTableVecType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["contents"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTokenActionRequestType(data: unknown): data is TokenActionRequestType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["name", "amount", "sender", "recipient", "spent_balance", "approvals"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["name", "amount", "sender"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTokenRuleKeyType(data: unknown): data is TokenRuleKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["is_protected"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTokenTokenType(data: unknown): data is TokenTokenType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "balance"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTokenTokenPolicyType(data: unknown): data is TokenTokenPolicyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "spent_balance", "rules"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTokenTokenPolicyCapType(data: unknown): data is TokenTokenPolicyCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "for"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTokenTokenPolicyCreatedType(data: unknown): data is TokenTokenPolicyCreatedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "is_mutable"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransferReceivingType(data: unknown): data is TransferReceivingType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "version"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["version"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransfer_policyRuleKeyType(data: unknown): data is Transfer_policyRuleKeyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["dummy_field"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransfer_policyTransferPolicyType(
  data: unknown,
): data is Transfer_policyTransferPolicyType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "balance", "rules"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransfer_policyTransferPolicyCapType(
  data: unknown,
): data is Transfer_policyTransferPolicyCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "policy_id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransfer_policyTransferPolicyCreatedType(
  data: unknown,
): data is Transfer_policyTransferPolicyCreatedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransfer_policyTransferPolicyDestroyedType(
  data: unknown,
): data is Transfer_policyTransferPolicyDestroyedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTransfer_policyTransferRequestType(
  data: unknown,
): data is Transfer_policyTransferRequestType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["item", "paid", "from", "receipts"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["paid"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isTx_contextTxContextType(data: unknown): data is Tx_contextTxContextType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["sender", "tx_hash", "epoch", "epoch_timestamp_ms", "ids_created"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["sender", "epoch", "epoch_timestamp_ms", "ids_created"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isUrlUrlType(data: unknown): data is UrlUrlType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["url"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isVec_mapEntryType(data: unknown): data is Vec_mapEntryType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["key", "value"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isVec_mapVecMapType(data: unknown): data is Vec_mapVecMapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["contents"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isVec_setVecSetType(data: unknown): data is Vec_setVecSetType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["contents"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isVersionedVersionChangeCapType(
  data: unknown,
): data is VersionedVersionChangeCapType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["versioned_id", "old_version"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["old_version"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isVersionedVersionedType(data: unknown): data is VersionedVersionedType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "version"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["version"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isZklogin_verified_idVerifiedIDType(
  data: unknown,
): data is Zklogin_verified_idVerifiedIDType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "owner", "key_claim_name", "key_claim_value", "issuer", "audience"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = [
    "owner",
    "key_claim_name",
    "key_claim_value",
    "issuer",
    "audience",
  ];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

export function isZklogin_verified_issuerVerifiedIssuerType(
  data: unknown,
): data is Zklogin_verified_issuerVerifiedIssuerType {
  if (!data || typeof data !== "object") return false;
  const obj = data as Record<string, unknown>;

  // 必須フィールドの存在確認
  const requiredFields = ["id", "owner", "issuer"];
  for (const field of requiredFields) {
    if (!(field in obj)) return false;
  }

  // string型フィールドの型確認
  const stringFields: string[] = ["owner", "issuer"];
  for (const field of stringFields) {
    if (typeof obj[field] !== "string") return false;
  }

  return true;
}

// Generated parse functions
export function parseAccumulatorAccumulatorRoot(
  json: unknown,
): AccumulatorAccumulatorRootType | null {
  return isAccumulatorAccumulatorRootType(json) ? json : null;
}

export function parseAccumulatorKey(json: unknown): AccumulatorKeyType | null {
  return isAccumulatorKeyType(json) ? json : null;
}

export function parseAccumulatorU128(json: unknown): AccumulatorU128Type | null {
  return isAccumulatorU128Type(json) ? json : null;
}

export function parseAccumulator_metadataMetadata(
  json: unknown,
): Accumulator_metadataMetadataType | null {
  return isAccumulator_metadataMetadataType(json) ? json : null;
}

export function parseAccumulator_metadataMetadataKey(
  json: unknown,
): Accumulator_metadataMetadataKeyType | null {
  return isAccumulator_metadataMetadataKeyType(json) ? json : null;
}

export function parseAccumulator_metadataOwner(
  json: unknown,
): Accumulator_metadataOwnerType | null {
  return isAccumulator_metadataOwnerType(json) ? json : null;
}

export function parseAccumulator_metadataOwnerKey(
  json: unknown,
): Accumulator_metadataOwnerKeyType | null {
  return isAccumulator_metadataOwnerKeyType(json) ? json : null;
}

export function parseAuthenticator_stateActiveJwk(
  json: unknown,
): Authenticator_stateActiveJwkType | null {
  return isAuthenticator_stateActiveJwkType(json) ? json : null;
}

export function parseAuthenticator_stateAuthenticatorState(
  json: unknown,
): Authenticator_stateAuthenticatorStateType | null {
  return isAuthenticator_stateAuthenticatorStateType(json) ? json : null;
}

export function parseAuthenticator_stateAuthenticatorStateInner(
  json: unknown,
): Authenticator_stateAuthenticatorStateInnerType | null {
  return isAuthenticator_stateAuthenticatorStateInnerType(json) ? json : null;
}

export function parseAuthenticator_stateJWK(json: unknown): Authenticator_stateJWKType | null {
  return isAuthenticator_stateJWKType(json) ? json : null;
}

export function parseAuthenticator_stateJwkId(json: unknown): Authenticator_stateJwkIdType | null {
  return isAuthenticator_stateJwkIdType(json) ? json : null;
}

export function parseBagBag(json: unknown): BagBagType | null {
  return isBagBagType(json) ? json : null;
}

export function parseBalanceBalance(json: unknown): BalanceBalanceType | null {
  return isBalanceBalanceType(json) ? json : null;
}

export function parseBalanceSupply(json: unknown): BalanceSupplyType | null {
  return isBalanceSupplyType(json) ? json : null;
}

export function parseBcsBCS(json: unknown): BcsBCSType | null {
  return isBcsBCSType(json) ? json : null;
}

export function parseBls12381G1(json: unknown): Bls12381G1Type | null {
  return isBls12381G1Type(json) ? json : null;
}

export function parseBls12381G2(json: unknown): Bls12381G2Type | null {
  return isBls12381G2Type(json) ? json : null;
}

export function parseBls12381GT(json: unknown): Bls12381GTType | null {
  return isBls12381GTType(json) ? json : null;
}

export function parseBls12381Scalar(json: unknown): Bls12381ScalarType | null {
  return isBls12381ScalarType(json) ? json : null;
}

export function parseBls12381UncompressedG1(json: unknown): Bls12381UncompressedG1Type | null {
  return isBls12381UncompressedG1Type(json) ? json : null;
}

export function parseBorrowBorrow(json: unknown): BorrowBorrowType | null {
  return isBorrowBorrowType(json) ? json : null;
}

export function parseBorrowReferent(json: unknown): BorrowReferentType | null {
  return isBorrowReferentType(json) ? json : null;
}

export function parseClockClock(json: unknown): ClockClockType | null {
  return isClockClockType(json) ? json : null;
}

export function parseCoinCoin(json: unknown): CoinCoinType | null {
  return isCoinCoinType(json) ? json : null;
}

export function parseCoinCoinMetadata(json: unknown): CoinCoinMetadataType | null {
  return isCoinCoinMetadataType(json) ? json : null;
}

export function parseCoinCurrencyCreated(json: unknown): CoinCurrencyCreatedType | null {
  return isCoinCurrencyCreatedType(json) ? json : null;
}

export function parseCoinDenyCap(json: unknown): CoinDenyCapType | null {
  return isCoinDenyCapType(json) ? json : null;
}

export function parseCoinDenyCapV2(json: unknown): CoinDenyCapV2Type | null {
  return isCoinDenyCapV2Type(json) ? json : null;
}

export function parseCoinRegulatedCoinMetadata(
  json: unknown,
): CoinRegulatedCoinMetadataType | null {
  return isCoinRegulatedCoinMetadataType(json) ? json : null;
}

export function parseCoinTreasuryCap(json: unknown): CoinTreasuryCapType | null {
  return isCoinTreasuryCapType(json) ? json : null;
}

export function parseConfigConfig(json: unknown): ConfigConfigType | null {
  return isConfigConfigType(json) ? json : null;
}

export function parseConfigSetting(json: unknown): ConfigSettingType | null {
  return isConfigSettingType(json) ? json : null;
}

export function parseConfigSettingData(json: unknown): ConfigSettingDataType | null {
  return isConfigSettingDataType(json) ? json : null;
}

export function parseDeny_listAddressKey(json: unknown): Deny_listAddressKeyType | null {
  return isDeny_listAddressKeyType(json) ? json : null;
}

export function parseDeny_listConfigKey(json: unknown): Deny_listConfigKeyType | null {
  return isDeny_listConfigKeyType(json) ? json : null;
}

export function parseDeny_listConfigWriteCap(json: unknown): Deny_listConfigWriteCapType | null {
  return isDeny_listConfigWriteCapType(json) ? json : null;
}

export function parseDeny_listDenyList(json: unknown): Deny_listDenyListType | null {
  return isDeny_listDenyListType(json) ? json : null;
}

export function parseDeny_listGlobalPauseKey(json: unknown): Deny_listGlobalPauseKeyType | null {
  return isDeny_listGlobalPauseKeyType(json) ? json : null;
}

export function parseDeny_listPerTypeConfigCreated(
  json: unknown,
): Deny_listPerTypeConfigCreatedType | null {
  return isDeny_listPerTypeConfigCreatedType(json) ? json : null;
}

export function parseDeny_listPerTypeList(json: unknown): Deny_listPerTypeListType | null {
  return isDeny_listPerTypeListType(json) ? json : null;
}

export function parseDerived_objectClaimed(json: unknown): Derived_objectClaimedType | null {
  return isDerived_objectClaimedType(json) ? json : null;
}

export function parseDerived_objectDerivedObjectKey(
  json: unknown,
): Derived_objectDerivedObjectKeyType | null {
  return isDerived_objectDerivedObjectKeyType(json) ? json : null;
}

export function parseDisplayDisplay(json: unknown): DisplayDisplayType | null {
  return isDisplayDisplayType(json) ? json : null;
}

export function parseDisplayDisplayCreated(json: unknown): DisplayDisplayCreatedType | null {
  return isDisplayDisplayCreatedType(json) ? json : null;
}

export function parseDisplayVersionUpdated(json: unknown): DisplayVersionUpdatedType | null {
  return isDisplayVersionUpdatedType(json) ? json : null;
}

export function parseDynamic_fieldField(json: unknown): Dynamic_fieldFieldType | null {
  return isDynamic_fieldFieldType(json) ? json : null;
}

export function parseDynamic_object_fieldWrapper(
  json: unknown,
): Dynamic_object_fieldWrapperType | null {
  return isDynamic_object_fieldWrapperType(json) ? json : null;
}

export function parseGroth16Curve(json: unknown): Groth16CurveType | null {
  return isGroth16CurveType(json) ? json : null;
}

export function parseGroth16PreparedVerifyingKey(
  json: unknown,
): Groth16PreparedVerifyingKeyType | null {
  return isGroth16PreparedVerifyingKeyType(json) ? json : null;
}

export function parseGroth16ProofPoints(json: unknown): Groth16ProofPointsType | null {
  return isGroth16ProofPointsType(json) ? json : null;
}

export function parseGroth16PublicProofInputs(json: unknown): Groth16PublicProofInputsType | null {
  return isGroth16PublicProofInputsType(json) ? json : null;
}

export function parseGroup_opsElement(json: unknown): Group_opsElementType | null {
  return isGroup_opsElementType(json) ? json : null;
}

export function parseKioskBorrow(json: unknown): KioskBorrowType | null {
  return isKioskBorrowType(json) ? json : null;
}

export function parseKioskItem(json: unknown): KioskItemType | null {
  return isKioskItemType(json) ? json : null;
}

export function parseKioskItemDelisted(json: unknown): KioskItemDelistedType | null {
  return isKioskItemDelistedType(json) ? json : null;
}

export function parseKioskItemListed(json: unknown): KioskItemListedType | null {
  return isKioskItemListedType(json) ? json : null;
}

export function parseKioskItemPurchased(json: unknown): KioskItemPurchasedType | null {
  return isKioskItemPurchasedType(json) ? json : null;
}

export function parseKioskKiosk(json: unknown): KioskKioskType | null {
  return isKioskKioskType(json) ? json : null;
}

export function parseKioskKioskOwnerCap(json: unknown): KioskKioskOwnerCapType | null {
  return isKioskKioskOwnerCapType(json) ? json : null;
}

export function parseKioskListing(json: unknown): KioskListingType | null {
  return isKioskListingType(json) ? json : null;
}

export function parseKioskLock(json: unknown): KioskLockType | null {
  return isKioskLockType(json) ? json : null;
}

export function parseKioskPurchaseCap(json: unknown): KioskPurchaseCapType | null {
  return isKioskPurchaseCapType(json) ? json : null;
}

export function parseKiosk_extensionExtension(json: unknown): Kiosk_extensionExtensionType | null {
  return isKiosk_extensionExtensionType(json) ? json : null;
}

export function parseKiosk_extensionExtensionKey(
  json: unknown,
): Kiosk_extensionExtensionKeyType | null {
  return isKiosk_extensionExtensionKeyType(json) ? json : null;
}

export function parseLinked_tableLinkedTable(json: unknown): Linked_tableLinkedTableType | null {
  return isLinked_tableLinkedTableType(json) ? json : null;
}

export function parseLinked_tableNode(json: unknown): Linked_tableNodeType | null {
  return isLinked_tableNodeType(json) ? json : null;
}

export function parseNitro_attestationNitroAttestationDocument(
  json: unknown,
): Nitro_attestationNitroAttestationDocumentType | null {
  return isNitro_attestationNitroAttestationDocumentType(json) ? json : null;
}

export function parseNitro_attestationPCREntry(
  json: unknown,
): Nitro_attestationPCREntryType | null {
  return isNitro_attestationPCREntryType(json) ? json : null;
}

export function parseObjectID(json: unknown): ObjectIDType | null {
  return isObjectIDType(json) ? json : null;
}

export function parseObjectUID(json: unknown): ObjectUIDType | null {
  return isObjectUIDType(json) ? json : null;
}

export function parseObject_bagObjectBag(json: unknown): Object_bagObjectBagType | null {
  return isObject_bagObjectBagType(json) ? json : null;
}

export function parseObject_tableObjectTable(json: unknown): Object_tableObjectTableType | null {
  return isObject_tableObjectTableType(json) ? json : null;
}

export function parsePackagePublisher(json: unknown): PackagePublisherType | null {
  return isPackagePublisherType(json) ? json : null;
}

export function parsePackageUpgradeCap(json: unknown): PackageUpgradeCapType | null {
  return isPackageUpgradeCapType(json) ? json : null;
}

export function parsePackageUpgradeReceipt(json: unknown): PackageUpgradeReceiptType | null {
  return isPackageUpgradeReceiptType(json) ? json : null;
}

export function parsePackageUpgradeTicket(json: unknown): PackageUpgradeTicketType | null {
  return isPackageUpgradeTicketType(json) ? json : null;
}

export function parsePartyParty(json: unknown): PartyPartyType | null {
  return isPartyPartyType(json) ? json : null;
}

export function parsePartyPermissions(json: unknown): PartyPermissionsType | null {
  return isPartyPermissionsType(json) ? json : null;
}

export function parsePriority_queueEntry(json: unknown): Priority_queueEntryType | null {
  return isPriority_queueEntryType(json) ? json : null;
}

export function parsePriority_queuePriorityQueue(
  json: unknown,
): Priority_queuePriorityQueueType | null {
  return isPriority_queuePriorityQueueType(json) ? json : null;
}

export function parseRandomRandom(json: unknown): RandomRandomType | null {
  return isRandomRandomType(json) ? json : null;
}

export function parseRandomRandomGenerator(json: unknown): RandomRandomGeneratorType | null {
  return isRandomRandomGeneratorType(json) ? json : null;
}

export function parseRandomRandomInner(json: unknown): RandomRandomInnerType | null {
  return isRandomRandomInnerType(json) ? json : null;
}

export function parseSuiSUI(json: unknown): SuiSUIType | null {
  return isSuiSUIType(json) ? json : null;
}

export function parseTableTable(json: unknown): TableTableType | null {
  return isTableTableType(json) ? json : null;
}

export function parseTable_vecTableVec(json: unknown): Table_vecTableVecType | null {
  return isTable_vecTableVecType(json) ? json : null;
}

export function parseTokenActionRequest(json: unknown): TokenActionRequestType | null {
  return isTokenActionRequestType(json) ? json : null;
}

export function parseTokenRuleKey(json: unknown): TokenRuleKeyType | null {
  return isTokenRuleKeyType(json) ? json : null;
}

export function parseTokenToken(json: unknown): TokenTokenType | null {
  return isTokenTokenType(json) ? json : null;
}

export function parseTokenTokenPolicy(json: unknown): TokenTokenPolicyType | null {
  return isTokenTokenPolicyType(json) ? json : null;
}

export function parseTokenTokenPolicyCap(json: unknown): TokenTokenPolicyCapType | null {
  return isTokenTokenPolicyCapType(json) ? json : null;
}

export function parseTokenTokenPolicyCreated(json: unknown): TokenTokenPolicyCreatedType | null {
  return isTokenTokenPolicyCreatedType(json) ? json : null;
}

export function parseTransferReceiving(json: unknown): TransferReceivingType | null {
  return isTransferReceivingType(json) ? json : null;
}

export function parseTransfer_policyRuleKey(json: unknown): Transfer_policyRuleKeyType | null {
  return isTransfer_policyRuleKeyType(json) ? json : null;
}

export function parseTransfer_policyTransferPolicy(
  json: unknown,
): Transfer_policyTransferPolicyType | null {
  return isTransfer_policyTransferPolicyType(json) ? json : null;
}

export function parseTransfer_policyTransferPolicyCap(
  json: unknown,
): Transfer_policyTransferPolicyCapType | null {
  return isTransfer_policyTransferPolicyCapType(json) ? json : null;
}

export function parseTransfer_policyTransferPolicyCreated(
  json: unknown,
): Transfer_policyTransferPolicyCreatedType | null {
  return isTransfer_policyTransferPolicyCreatedType(json) ? json : null;
}

export function parseTransfer_policyTransferPolicyDestroyed(
  json: unknown,
): Transfer_policyTransferPolicyDestroyedType | null {
  return isTransfer_policyTransferPolicyDestroyedType(json) ? json : null;
}

export function parseTransfer_policyTransferRequest(
  json: unknown,
): Transfer_policyTransferRequestType | null {
  return isTransfer_policyTransferRequestType(json) ? json : null;
}

export function parseTx_contextTxContext(json: unknown): Tx_contextTxContextType | null {
  return isTx_contextTxContextType(json) ? json : null;
}

export function parseUrlUrl(json: unknown): UrlUrlType | null {
  return isUrlUrlType(json) ? json : null;
}

export function parseVec_mapEntry(json: unknown): Vec_mapEntryType | null {
  return isVec_mapEntryType(json) ? json : null;
}

export function parseVec_mapVecMap(json: unknown): Vec_mapVecMapType | null {
  return isVec_mapVecMapType(json) ? json : null;
}

export function parseVec_setVecSet(json: unknown): Vec_setVecSetType | null {
  return isVec_setVecSetType(json) ? json : null;
}

export function parseVersionedVersionChangeCap(
  json: unknown,
): VersionedVersionChangeCapType | null {
  return isVersionedVersionChangeCapType(json) ? json : null;
}

export function parseVersionedVersioned(json: unknown): VersionedVersionedType | null {
  return isVersionedVersionedType(json) ? json : null;
}

export function parseZklogin_verified_idVerifiedID(
  json: unknown,
): Zklogin_verified_idVerifiedIDType | null {
  return isZklogin_verified_idVerifiedIDType(json) ? json : null;
}

export function parseZklogin_verified_issuerVerifiedIssuer(
  json: unknown,
): Zklogin_verified_issuerVerifiedIssuerType | null {
  return isZklogin_verified_issuerVerifiedIssuerType(json) ? json : null;
}

// Table types metadata

/**
 * Table<string, string> metadata
 *
 * Base type: { id: string }
 * Resolved type: Record<string, string>
 *
 * Usage:
 * 1. Get table ID from base type
 * 2. Fetch table contents using your preferred method (GraphQL, gRPC, etc.)
 * 3. Parse contents into resolved type
 *
 * Example:
 *   const tableId = data.fieldName.id;
 *   const contents = await fetchTableContents(tableId);
 *   const resolvedData: ResolvedType = { ...data, fieldName: contents };
 */

/**
 * Table<Uint8Array, string[]> metadata
 *
 * Base type: { id: string }
 * Resolved type: Record<string, string[]>
 *
 * Usage:
 * 1. Get table ID from base type
 * 2. Fetch table contents using your preferred method (GraphQL, gRPC, etc.)
 * 3. Parse contents into resolved type
 *
 * Example:
 *   const tableId = data.fieldName.id;
 *   const contents = await fetchTableContents(tableId);
 *   const resolvedData: ResolvedType = { ...data, fieldName: contents };
 */

/**
 * Table<string, unknown> metadata
 *
 * Base type: { id: string }
 * Resolved type: Record<string, unknown>
 *
 * Usage:
 * 1. Get table ID from base type
 * 2. Fetch table contents using your preferred method (GraphQL, gRPC, etc.)
 * 3. Parse contents into resolved type
 *
 * Example:
 *   const tableId = data.fieldName.id;
 *   const contents = await fetchTableContents(tableId);
 *   const resolvedData: ResolvedType = { ...data, fieldName: contents };
 */

// Extract packageId once at module level for better performance
const packageId = Object.values(suiAbi)[0]?.address;
if (!packageId) {
  throw new Error("Package ID not found in sui ABI");
}

// Type-safe method-chaining API
export const suiPackage = {
  abi: suiAbi,
  packageId,
  accumulator: {
    accumulator_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::accumulator_address`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    accumulator_key(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::accumulator_key`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    create_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::create_u128`,
        arguments: [...options.arguments],
      });
    },
    destroy_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::destroy_u128`,
        arguments: [...options.arguments],
      });
    },
    emit_deposit_event(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::emit_deposit_event`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    emit_withdraw_event(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::emit_withdraw_event`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_zero_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::is_zero_u128`,
        arguments: [...options.arguments],
      });
    },
    root_add_accumulator(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::root_add_accumulator`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    root_borrow_accumulator_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::root_borrow_accumulator_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    root_has_accumulator(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::root_has_accumulator`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    root_id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::root_id`,
        arguments: [...options.arguments],
      });
    },
    root_id_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::root_id_mut`,
        arguments: [...options.arguments],
      });
    },
    root_remove_accumulator(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::root_remove_accumulator`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    update_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator::update_u128`,
        arguments: [...options.arguments],
      });
    },
  },
  accumulator_metadata: {
    create_accumulator_metadata(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator_metadata::create_accumulator_metadata`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_accumulator_metadata(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::accumulator_metadata::remove_accumulator_metadata`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  address: {
    from_ascii_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::from_ascii_bytes`,
        arguments: [...options.arguments],
      });
    },
    from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::from_bytes`,
        arguments: [...options.arguments],
      });
    },
    from_u256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::from_u256`,
        arguments: [...options.arguments],
      });
    },
    length(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::length`,
        arguments: [],
      });
    },
    max(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::max`,
        arguments: [],
      });
    },
    to_ascii_string(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::to_ascii_string`,
        arguments: [...options.arguments],
      });
    },
    to_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::to_bytes`,
        arguments: [...options.arguments],
      });
    },
    to_string(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::to_string`,
        arguments: [...options.arguments],
      });
    },
    to_u256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::address::to_u256`,
        arguments: [...options.arguments],
      });
    },
  },
  bag: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::contains_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::destroy_empty`,
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::is_empty`,
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::length`,
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::new`,
        arguments: [],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bag::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  balance: {
    create_supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::create_supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    decrease_supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::decrease_supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::destroy_supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_zero(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::destroy_zero`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    increase_supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::increase_supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    join(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::join`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    split(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::split`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    supply_value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::supply_value`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::value`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    withdraw_all(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::withdraw_all`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    zero(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::balance::zero`,
        arguments: [],
      });
    },
  },
  bcs: {
    into_remainder_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::into_remainder_bytes`,
        arguments: [...options.arguments],
      });
    },
    new(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::new`,
        arguments: [...options.arguments],
      });
    },
    peel_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_address`,
        arguments: [...options.arguments],
      });
    },
    peel_bool(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_bool`,
        arguments: [...options.arguments],
      });
    },
    peel_enum_tag(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_enum_tag`,
        arguments: [...options.arguments],
      });
    },
    peel_option_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_address`,
        arguments: [...options.arguments],
      });
    },
    peel_option_bool(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_bool`,
        arguments: [...options.arguments],
      });
    },
    peel_option_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_u128`,
        arguments: [...options.arguments],
      });
    },
    peel_option_u16(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_u16`,
        arguments: [...options.arguments],
      });
    },
    peel_option_u256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_u256`,
        arguments: [...options.arguments],
      });
    },
    peel_option_u32(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_u32`,
        arguments: [...options.arguments],
      });
    },
    peel_option_u64(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_u64`,
        arguments: [...options.arguments],
      });
    },
    peel_option_u8(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_option_u8`,
        arguments: [...options.arguments],
      });
    },
    peel_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_u128`,
        arguments: [...options.arguments],
      });
    },
    peel_u16(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_u16`,
        arguments: [...options.arguments],
      });
    },
    peel_u256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_u256`,
        arguments: [...options.arguments],
      });
    },
    peel_u32(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_u32`,
        arguments: [...options.arguments],
      });
    },
    peel_u64(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_u64`,
        arguments: [...options.arguments],
      });
    },
    peel_u8(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_u8`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_address`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_bool(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_bool`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_length`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_u128`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_u16(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_u16`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_u256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_u256`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_u32(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_u32`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_u64(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_u64`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_u8(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_u8`,
        arguments: [...options.arguments],
      });
    },
    peel_vec_vec_u8(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::peel_vec_vec_u8`,
        arguments: [...options.arguments],
      });
    },
    to_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bcs::to_bytes`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  bls12381: {
    bls12381_min_pk_verify(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::bls12381_min_pk_verify`,
        arguments: [...options.arguments],
      });
    },
    bls12381_min_sig_verify(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::bls12381_min_sig_verify`,
        arguments: [...options.arguments],
      });
    },
    g1_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_add`,
        arguments: [...options.arguments],
      });
    },
    g1_div(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_div`,
        arguments: [...options.arguments],
      });
    },
    g1_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    g1_generator(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_generator`,
        arguments: [],
      });
    },
    g1_identity(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_identity`,
        arguments: [],
      });
    },
    g1_mul(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_mul`,
        arguments: [...options.arguments],
      });
    },
    g1_multi_scalar_multiplication(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_multi_scalar_multiplication`,
        arguments: [...options.arguments],
      });
    },
    g1_neg(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_neg`,
        arguments: [...options.arguments],
      });
    },
    g1_sub(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_sub`,
        arguments: [...options.arguments],
      });
    },
    g1_to_uncompressed_g1(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g1_to_uncompressed_g1`,
        arguments: [...options.arguments],
      });
    },
    g2_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_add`,
        arguments: [...options.arguments],
      });
    },
    g2_div(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_div`,
        arguments: [...options.arguments],
      });
    },
    g2_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    g2_generator(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_generator`,
        arguments: [],
      });
    },
    g2_identity(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_identity`,
        arguments: [],
      });
    },
    g2_mul(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_mul`,
        arguments: [...options.arguments],
      });
    },
    g2_multi_scalar_multiplication(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_multi_scalar_multiplication`,
        arguments: [...options.arguments],
      });
    },
    g2_neg(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_neg`,
        arguments: [...options.arguments],
      });
    },
    g2_sub(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::g2_sub`,
        arguments: [...options.arguments],
      });
    },
    gt_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_add`,
        arguments: [...options.arguments],
      });
    },
    gt_div(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_div`,
        arguments: [...options.arguments],
      });
    },
    gt_generator(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_generator`,
        arguments: [],
      });
    },
    gt_identity(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_identity`,
        arguments: [],
      });
    },
    gt_mul(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_mul`,
        arguments: [...options.arguments],
      });
    },
    gt_neg(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_neg`,
        arguments: [...options.arguments],
      });
    },
    gt_sub(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::gt_sub`,
        arguments: [...options.arguments],
      });
    },
    hash_to_g1(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::hash_to_g1`,
        arguments: [...options.arguments],
      });
    },
    hash_to_g2(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::hash_to_g2`,
        arguments: [...options.arguments],
      });
    },
    pairing(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::pairing`,
        arguments: [...options.arguments],
      });
    },
    scalar_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_add`,
        arguments: [...options.arguments],
      });
    },
    scalar_div(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_div`,
        arguments: [...options.arguments],
      });
    },
    scalar_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    scalar_from_u64(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_from_u64`,
        arguments: [...options.arguments],
      });
    },
    scalar_inv(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_inv`,
        arguments: [...options.arguments],
      });
    },
    scalar_mul(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_mul`,
        arguments: [...options.arguments],
      });
    },
    scalar_neg(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_neg`,
        arguments: [...options.arguments],
      });
    },
    scalar_one(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_one`,
        arguments: [],
      });
    },
    scalar_sub(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_sub`,
        arguments: [...options.arguments],
      });
    },
    scalar_zero(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::scalar_zero`,
        arguments: [],
      });
    },
    uncompressed_g1_sum(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::uncompressed_g1_sum`,
        arguments: [...options.arguments],
      });
    },
    uncompressed_g1_to_g1(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::bls12381::uncompressed_g1_to_g1`,
        arguments: [...options.arguments],
      });
    },
  },
  borrow: {
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::borrow::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::borrow::destroy`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::borrow::new`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    put_back(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::borrow::put_back`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  clock: {
    timestamp_ms(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::clock::timestamp_ms`,
        arguments: [...options.arguments],
      });
    },
  },
  coin: {
    balance(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::balance`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    balance_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::balance_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    burn(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::burn`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    create_currency(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::create_currency`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    create_regulated_currency(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::create_regulated_currency`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    create_regulated_currency_v2(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::create_regulated_currency_v2`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_contains_current_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_contains_current_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_contains_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_contains_next_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_disable_global_pause(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_disable_global_pause`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_enable_global_pause(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_enable_global_pause`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_is_global_pause_enabled_current_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_is_global_pause_enabled_current_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_is_global_pause_enabled_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_is_global_pause_enabled_next_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    deny_list_v2_remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::deny_list_v2_remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_zero(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::destroy_zero`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    divide_into_n(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::divide_into_n`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    from_balance(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::from_balance`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_decimals(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::get_decimals`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_description(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::get_description`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_icon_url(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::get_icon_url`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_name(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::get_name`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_symbol(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::get_symbol`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    into_balance(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::into_balance`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    join(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::join`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    migrate_regulated_currency_to_v2(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::migrate_regulated_currency_to_v2`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    mint(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::mint`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    mint_and_transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::mint_and_transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    mint_balance(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::mint_balance`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    put(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::put`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    split(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::split`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    supply_immut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::supply_immut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    supply_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::supply_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    take(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::take`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    total_supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::total_supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    treasury_into_supply(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::treasury_into_supply`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    update_description(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::update_description`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    update_icon_url(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::update_icon_url`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    update_name(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::update_name`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    update_symbol(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::update_symbol`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::value`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    zero(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::coin::zero`,
        arguments: [],
      });
    },
  },
  config: {
    add_for_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::add_for_next_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_for_next_epoch_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::borrow_for_next_epoch_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::exists_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists_with_type_for_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::exists_with_type_for_next_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::new`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    read_setting(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::read_setting`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    read_setting_for_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::read_setting_for_next_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_for_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::remove_for_next_epoch`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    share(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::share`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::config::transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  deny_list: {
    migrate_v1_to_v2(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::migrate_v1_to_v2`,
        arguments: [...options.arguments],
      });
    },
    v1_add(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v1_add`,
        arguments: [...options.arguments],
      });
    },
    v1_contains(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v1_contains`,
        arguments: [...options.arguments],
      });
    },
    v1_remove(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v1_remove`,
        arguments: [...options.arguments],
      });
    },
    v2_add(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_add`,
        arguments: [...options.arguments],
      });
    },
    v2_contains_current_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_contains_current_epoch`,
        arguments: [...options.arguments],
      });
    },
    v2_contains_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_contains_next_epoch`,
        arguments: [...options.arguments],
      });
    },
    v2_disable_global_pause(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_disable_global_pause`,
        arguments: [...options.arguments],
      });
    },
    v2_enable_global_pause(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_enable_global_pause`,
        arguments: [...options.arguments],
      });
    },
    v2_is_global_pause_enabled_current_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_is_global_pause_enabled_current_epoch`,
        arguments: [...options.arguments],
      });
    },
    v2_is_global_pause_enabled_next_epoch(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_is_global_pause_enabled_next_epoch`,
        arguments: [...options.arguments],
      });
    },
    v2_remove(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::deny_list::v2_remove`,
        arguments: [...options.arguments],
      });
    },
  },
  derived_object: {
    claim(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::derived_object::claim`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    derive_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::derived_object::derive_address`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::derived_object::exists`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  display: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_multiple(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::add_multiple`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    create_and_keep(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::create_and_keep`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    edit(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::edit`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    fields(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::fields`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_authorized(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::is_authorized`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::new`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new_with_fields(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::new_with_fields`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    update_version(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::update_version`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    version(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::display::version`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  dynamic_field: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_child_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::add_child_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_child_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::borrow_child_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_child_object_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::borrow_child_object_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists_(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::exists_`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::exists_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    field_info(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::field_info`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    field_info_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::field_info_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    has_child_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::has_child_object`,
        arguments: [...options.arguments],
      });
    },
    has_child_object_with_ty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::has_child_object_with_ty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    hash_type_and_key(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::hash_type_and_key`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_child_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::remove_child_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_if_exists(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_field::remove_if_exists`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  dynamic_object_field: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists_(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::exists_`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    exists_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::exists_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::id`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    internal_add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::internal_add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    internal_borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::internal_borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    internal_borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::internal_borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    internal_exists_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::internal_exists_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    internal_remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::internal_remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::dynamic_object_field::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  ecdsa_k1: {
    decompress_pubkey(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ecdsa_k1::decompress_pubkey`,
        arguments: [...options.arguments],
      });
    },
    secp256k1_ecrecover(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ecdsa_k1::secp256k1_ecrecover`,
        arguments: [...options.arguments],
      });
    },
    secp256k1_verify(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ecdsa_k1::secp256k1_verify`,
        arguments: [...options.arguments],
      });
    },
  },
  ecdsa_r1: {
    secp256r1_ecrecover(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ecdsa_r1::secp256r1_ecrecover`,
        arguments: [...options.arguments],
      });
    },
    secp256r1_verify(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ecdsa_r1::secp256r1_verify`,
        arguments: [...options.arguments],
      });
    },
  },
  ecvrf: {
    ecvrf_verify(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ecvrf::ecvrf_verify`,
        arguments: [...options.arguments],
      });
    },
  },
  ed25519: {
    ed25519_verify(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::ed25519::ed25519_verify`,
        arguments: [...options.arguments],
      });
    },
  },
  event: {
    emit(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::event::emit`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  groth16: {
    bls12381(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::bls12381`,
        arguments: [],
      });
    },
    bn254(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::bn254`,
        arguments: [],
      });
    },
    prepare_verifying_key(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::prepare_verifying_key`,
        arguments: [...options.arguments],
      });
    },
    proof_points_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::proof_points_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    public_proof_inputs_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::public_proof_inputs_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    pvk_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::pvk_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    pvk_to_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::pvk_to_bytes`,
        arguments: [...options.arguments],
      });
    },
    verify_groth16_proof(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::groth16::verify_groth16_proof`,
        arguments: [...options.arguments],
      });
    },
  },
  group_ops: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::bytes`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    convert(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::convert`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    div(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::div`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    equal(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::equal`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::from_bytes`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    hash_to(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::hash_to`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    mul(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::mul`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    multi_scalar_multiplication(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::multi_scalar_multiplication`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    pairing(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::pairing`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    set_as_prefix(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::set_as_prefix`,
        arguments: [...options.arguments],
      });
    },
    sub(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::sub`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    sum(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::group_ops::sum`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  hash: {
    blake2b256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::hash::blake2b256`,
        arguments: [...options.arguments],
      });
    },
    keccak256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::hash::keccak256`,
        arguments: [...options.arguments],
      });
    },
  },
  hex: {
    decode(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::hex::decode`,
        arguments: [...options.arguments],
      });
    },
    encode(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::hex::encode`,
        arguments: [...options.arguments],
      });
    },
  },
  hmac: {
    hmac_sha3_256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::hmac::hmac_sha3_256`,
        arguments: [...options.arguments],
      });
    },
  },
  kiosk: {
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_val(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::borrow_val`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    close_and_withdraw(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::close_and_withdraw`,
        arguments: [...options.arguments],
      });
    },
    default(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::default`,
        arguments: [],
      });
    },
    delist(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::delist`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    has_access(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::has_access`,
        arguments: [...options.arguments],
      });
    },
    has_item(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::has_item`,
        arguments: [...options.arguments],
      });
    },
    has_item_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::has_item_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_listed(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::is_listed`,
        arguments: [...options.arguments],
      });
    },
    is_listed_exclusively(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::is_listed_exclusively`,
        arguments: [...options.arguments],
      });
    },
    is_locked(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::is_locked`,
        arguments: [...options.arguments],
      });
    },
    item_count(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::item_count`,
        arguments: [...options.arguments],
      });
    },
    kiosk_owner_cap_for(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::kiosk_owner_cap_for`,
        arguments: [...options.arguments],
      });
    },
    list(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::list`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    list_with_purchase_cap(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::list_with_purchase_cap`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    lock(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::lock`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    lock_internal(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::lock_internal`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::new`,
        arguments: [],
      });
    },
    owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::owner`,
        arguments: [...options.arguments],
      });
    },
    place(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::place`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    place_and_list(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::place_and_list`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    place_internal(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::place_internal`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    profits_amount(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::profits_amount`,
        arguments: [...options.arguments],
      });
    },
    profits_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::profits_mut`,
        arguments: [...options.arguments],
      });
    },
    purchase(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::purchase`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    purchase_cap_item(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::purchase_cap_item`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    purchase_cap_kiosk(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::purchase_cap_kiosk`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    purchase_cap_min_price(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::purchase_cap_min_price`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    purchase_with_cap(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::purchase_with_cap`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    return_purchase_cap(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::return_purchase_cap`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    return_val(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::return_val`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    set_allow_extensions(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::set_allow_extensions`,
        arguments: [...options.arguments],
      });
    },
    set_owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::set_owner`,
        arguments: [...options.arguments],
      });
    },
    set_owner_custom(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::set_owner_custom`,
        arguments: [...options.arguments],
      });
    },
    take(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::take`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    uid(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::uid`,
        arguments: [...options.arguments],
      });
    },
    uid_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::uid_mut`,
        arguments: [...options.arguments],
      });
    },
    uid_mut_as_owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::uid_mut_as_owner`,
        arguments: [...options.arguments],
      });
    },
    uid_mut_internal(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::uid_mut_internal`,
        arguments: [...options.arguments],
      });
    },
    withdraw(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk::withdraw`,
        arguments: [...options.arguments],
      });
    },
  },
  kiosk_extension: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    can_lock(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::can_lock`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    can_place(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::can_place`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    disable(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::disable`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    enable(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::enable`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_enabled(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::is_enabled`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_installed(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::is_installed`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    lock(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::lock`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    place(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::place`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    storage(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::storage`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    storage_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::kiosk_extension::storage_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  linked_table: {
    back(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::back`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::destroy_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    drop(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::drop`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    front(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::front`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::is_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::length`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::new`,
        arguments: [],
      });
    },
    next(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::next`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    pop_back(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::pop_back`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    pop_front(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::pop_front`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    prev(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::prev`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    push_back(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::push_back`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    push_front(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::push_front`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::linked_table::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  math: {
    diff(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::diff`,
        arguments: [...options.arguments],
      });
    },
    divide_and_round_up(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::divide_and_round_up`,
        arguments: [...options.arguments],
      });
    },
    max(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::max`,
        arguments: [...options.arguments],
      });
    },
    min(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::min`,
        arguments: [...options.arguments],
      });
    },
    pow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::pow`,
        arguments: [...options.arguments],
      });
    },
    sqrt(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::sqrt`,
        arguments: [...options.arguments],
      });
    },
    sqrt_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::math::sqrt_u128`,
        arguments: [...options.arguments],
      });
    },
  },
  nitro_attestation: {
    digest(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::digest`,
        arguments: [...options.arguments],
      });
    },
    index(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::index`,
        arguments: [...options.arguments],
      });
    },
    load_nitro_attestation(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::load_nitro_attestation`,
        arguments: [...options.arguments],
      });
    },
    module_id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::module_id`,
        arguments: [...options.arguments],
      });
    },
    nonce(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::nonce`,
        arguments: [...options.arguments],
      });
    },
    pcrs(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::pcrs`,
        arguments: [...options.arguments],
      });
    },
    public_key(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::public_key`,
        arguments: [...options.arguments],
      });
    },
    timestamp(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::timestamp`,
        arguments: [...options.arguments],
      });
    },
    user_data(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::user_data`,
        arguments: [...options.arguments],
      });
    },
    value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::nitro_attestation::value`,
        arguments: [...options.arguments],
      });
    },
  },
  object: {
    authenticator_state(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::authenticator_state`,
        arguments: [],
      });
    },
    borrow_id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::borrow_id`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    clock(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::clock`,
        arguments: [],
      });
    },
    delete(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::delete`,
        arguments: [...options.arguments],
      });
    },
    id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    id_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id_address`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    id_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id_bytes`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    id_from_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id_from_address`,
        arguments: [...options.arguments],
      });
    },
    id_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    id_to_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id_to_address`,
        arguments: [...options.arguments],
      });
    },
    id_to_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::id_to_bytes`,
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::new`,
        arguments: [],
      });
    },
    new_uid_from_hash(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::new_uid_from_hash`,
        arguments: [...options.arguments],
      });
    },
    randomness_state(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::randomness_state`,
        arguments: [],
      });
    },
    sui_accumulator_root_address(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::sui_accumulator_root_address`,
        arguments: [],
      });
    },
    sui_accumulator_root_object_id(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::sui_accumulator_root_object_id`,
        arguments: [],
      });
    },
    sui_deny_list_object_id(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::sui_deny_list_object_id`,
        arguments: [],
      });
    },
    uid_as_inner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::uid_as_inner`,
        arguments: [...options.arguments],
      });
    },
    uid_to_address(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::uid_to_address`,
        arguments: [...options.arguments],
      });
    },
    uid_to_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::uid_to_bytes`,
        arguments: [...options.arguments],
      });
    },
    uid_to_inner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object::uid_to_inner`,
        arguments: [...options.arguments],
      });
    },
  },
  object_bag: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::contains_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::destroy_empty`,
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::is_empty`,
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::length`,
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::new`,
        arguments: [],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    value_id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_bag::value_id`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  object_table: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::destroy_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::is_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::length`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::new`,
        arguments: [],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    value_id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::object_table::value_id`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  package: {
    additive_policy(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::additive_policy`,
        arguments: [],
      });
    },
    authorize_upgrade(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::authorize_upgrade`,
        arguments: [...options.arguments],
      });
    },
    burn_publisher(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::burn_publisher`,
        arguments: [...options.arguments],
      });
    },
    claim(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::claim`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    claim_and_keep(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::claim_and_keep`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    commit_upgrade(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::commit_upgrade`,
        arguments: [...options.arguments],
      });
    },
    compatible_policy(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::compatible_policy`,
        arguments: [],
      });
    },
    dep_only_policy(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::dep_only_policy`,
        arguments: [],
      });
    },
    from_module(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::from_module`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    from_package(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::from_package`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    make_immutable(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::make_immutable`,
        arguments: [...options.arguments],
      });
    },
    only_additive_upgrades(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::only_additive_upgrades`,
        arguments: [...options.arguments],
      });
    },
    only_dep_upgrades(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::only_dep_upgrades`,
        arguments: [...options.arguments],
      });
    },
    published_module(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::published_module`,
        arguments: [...options.arguments],
      });
    },
    published_package(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::published_package`,
        arguments: [...options.arguments],
      });
    },
    receipt_cap(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::receipt_cap`,
        arguments: [...options.arguments],
      });
    },
    receipt_package(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::receipt_package`,
        arguments: [...options.arguments],
      });
    },
    ticket_digest(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::ticket_digest`,
        arguments: [...options.arguments],
      });
    },
    ticket_package(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::ticket_package`,
        arguments: [...options.arguments],
      });
    },
    ticket_policy(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::ticket_policy`,
        arguments: [...options.arguments],
      });
    },
    upgrade_package(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::upgrade_package`,
        arguments: [...options.arguments],
      });
    },
    upgrade_policy(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::upgrade_policy`,
        arguments: [...options.arguments],
      });
    },
    version(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::package::version`,
        arguments: [...options.arguments],
      });
    },
  },
  party: {
    into_native(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::party::into_native`,
        arguments: [...options.arguments],
      });
    },
    is_single_owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::party::is_single_owner`,
        arguments: [...options.arguments],
      });
    },
    single_owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::party::single_owner`,
        arguments: [...options.arguments],
      });
    },
  },
  pay: {
    divide_and_keep(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::divide_and_keep`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    join(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::join`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    join_vec(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::join_vec`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    join_vec_and_transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::join_vec_and_transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    keep(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::keep`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    split(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::split`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    split_and_transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::split_and_transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    split_vec(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::pay::split_vec`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  poseidon: {
    poseidon_bn254(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::poseidon::poseidon_bn254`,
        arguments: [...options.arguments],
      });
    },
  },
  priority_queue: {
    create_entries(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::priority_queue::create_entries`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    insert(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::priority_queue::insert`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::priority_queue::new`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new_entry(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::priority_queue::new_entry`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    pop_max(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::priority_queue::pop_max`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    priorities(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::priority_queue::priorities`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  random: {
    generate_bool(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_bool`,
        arguments: [...options.arguments],
      });
    },
    generate_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_bytes`,
        arguments: [...options.arguments],
      });
    },
    generate_u128(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u128`,
        arguments: [...options.arguments],
      });
    },
    generate_u128_in_range(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u128_in_range`,
        arguments: [...options.arguments],
      });
    },
    generate_u16(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u16`,
        arguments: [...options.arguments],
      });
    },
    generate_u16_in_range(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u16_in_range`,
        arguments: [...options.arguments],
      });
    },
    generate_u256(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u256`,
        arguments: [...options.arguments],
      });
    },
    generate_u32(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u32`,
        arguments: [...options.arguments],
      });
    },
    generate_u32_in_range(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u32_in_range`,
        arguments: [...options.arguments],
      });
    },
    generate_u64(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u64`,
        arguments: [...options.arguments],
      });
    },
    generate_u64_in_range(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u64_in_range`,
        arguments: [...options.arguments],
      });
    },
    generate_u8(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u8`,
        arguments: [...options.arguments],
      });
    },
    generate_u8_in_range(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::generate_u8_in_range`,
        arguments: [...options.arguments],
      });
    },
    new_generator(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::new_generator`,
        arguments: [...options.arguments],
      });
    },
    shuffle(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::random::shuffle`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  sui: {
    transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::sui::transfer`,
        arguments: [...options.arguments],
      });
    },
  },
  table: {
    add(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::add`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::destroy_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    drop(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::drop`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::is_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::length`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::new`,
        arguments: [],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  table_vec: {
    borrow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::borrow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    borrow_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::borrow_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::destroy_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    drop(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::drop`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    empty(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::empty`,
        arguments: [],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::is_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::length`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    pop_back(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::pop_back`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    push_back(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::push_back`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    singleton(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::singleton`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    swap(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::swap`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    swap_remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::table_vec::swap_remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  token: {
    action(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::action`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_approval(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::add_approval`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_rule_config(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::add_rule_config`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_rule_for_action(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::add_rule_for_action`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    allow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::allow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    amount(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::amount`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    approvals(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::approvals`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    burn(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::burn`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    confirm_request(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::confirm_request`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    confirm_request_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::confirm_request_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    confirm_with_policy_cap(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::confirm_with_policy_cap`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    confirm_with_treasury_cap(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::confirm_with_treasury_cap`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_zero(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::destroy_zero`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    disallow(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::disallow`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    flush(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::flush`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    from_coin(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::from_coin`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    from_coin_action(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::from_coin_action`,
        arguments: [],
      });
    },
    has_rule_config(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::has_rule_config`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    has_rule_config_with_type(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::has_rule_config_with_type`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_allowed(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::is_allowed`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    join(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::join`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    keep(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::keep`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    mint(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::mint`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new_policy(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::new_policy`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new_request(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::new_request`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    recipient(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::recipient`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_rule_config(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::remove_rule_config`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_rule_for_action(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::remove_rule_for_action`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    rule_config(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::rule_config`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    rule_config_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::rule_config_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    rules(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::rules`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    sender(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::sender`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    share_policy(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::share_policy`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    spend(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::spend`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    spend_action(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::spend_action`,
        arguments: [],
      });
    },
    spent(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::spent`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    spent_balance(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::spent_balance`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    split(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::split`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    to_coin(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::to_coin`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    to_coin_action(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::to_coin_action`,
        arguments: [],
      });
    },
    transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    transfer_action(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::transfer_action`,
        arguments: [],
      });
    },
    value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::value`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    zero(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::token::zero`,
        arguments: [],
      });
    },
  },
  transfer: {
    freeze_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::freeze_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    freeze_object_impl(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::freeze_object_impl`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    party_transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::party_transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    party_transfer_impl(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::party_transfer_impl`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    public_freeze_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::public_freeze_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    public_party_transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::public_party_transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    public_receive(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::public_receive`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    public_share_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::public_share_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    public_transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::public_transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    receive(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::receive`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    receiving_object_id(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::receiving_object_id`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    share_object(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::share_object`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    share_object_impl(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::share_object_impl`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    transfer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::transfer`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    transfer_impl(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer::transfer_impl`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  transfer_policy: {
    add_receipt(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::add_receipt`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_rule(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::add_rule`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    add_to_balance(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::add_to_balance`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    confirm_request(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::confirm_request`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    default(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::default`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_and_withdraw(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::destroy_and_withdraw`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    from(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::from`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_rule(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::get_rule`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    has_rule(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::has_rule`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    item(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::item`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::new`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    new_request(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::new_request`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    paid(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::paid`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_rule(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::remove_rule`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    rules(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::rules`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    uid(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::uid`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    uid_mut_as_owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::uid_mut_as_owner`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    withdraw(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::transfer_policy::withdraw`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  tx_context: {
    digest(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::digest`,
        arguments: [],
      });
    },
    epoch(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::epoch`,
        arguments: [],
      });
    },
    epoch_timestamp_ms(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::epoch_timestamp_ms`,
        arguments: [],
      });
    },
    fresh_object_address(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::fresh_object_address`,
        arguments: [],
      });
    },
    gas_price(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::gas_price`,
        arguments: [],
      });
    },
    reference_gas_price(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::reference_gas_price`,
        arguments: [],
      });
    },
    sender(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::sender`,
        arguments: [],
      });
    },
    sponsor(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::tx_context::sponsor`,
        arguments: [],
      });
    },
  },
  types: {
    is_one_time_witness(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::types::is_one_time_witness`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  url: {
    inner_url(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::url::inner_url`,
        arguments: [...options.arguments],
      });
    },
    new_unsafe(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::url::new_unsafe`,
        arguments: [...options.arguments],
      });
    },
    new_unsafe_from_bytes(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::url::new_unsafe_from_bytes`,
        arguments: [...options.arguments],
      });
    },
    update(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::url::update`,
        arguments: [...options.arguments],
      });
    },
  },
  vdf: {
    hash_to_input(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vdf::hash_to_input`,
        arguments: [...options.arguments],
      });
    },
    vdf_verify(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vdf::vdf_verify`,
        arguments: [...options.arguments],
      });
    },
  },
  vec_map: {
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::destroy_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    empty(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::empty`,
        arguments: [],
      });
    },
    from_keys_values(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::from_keys_values`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::get`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_entry_by_idx(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::get_entry_by_idx`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_entry_by_idx_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::get_entry_by_idx_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_idx(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::get_idx`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_idx_opt(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::get_idx_opt`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    get_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::get_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    insert(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::insert`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    into_keys_values(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::into_keys_values`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::is_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    keys(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::keys`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::length`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    pop(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::pop`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_entry_by_idx(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::remove_entry_by_idx`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    size(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::size`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    try_get(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_map::try_get`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  vec_set: {
    contains(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::contains`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    empty(tx: Transaction): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::empty`,
        arguments: [],
      });
    },
    from_keys(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::from_keys`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    insert(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::insert`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    into_keys(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::into_keys`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    is_empty(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::is_empty`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    keys(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::keys`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    length(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::length`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::remove`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    singleton(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::singleton`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    size(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::vec_set::size`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
  },
  versioned: {
    create(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::create`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    destroy(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::destroy`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    load_value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::load_value`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    load_value_mut(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::load_value_mut`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    remove_value_for_upgrade(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::remove_value_for_upgrade`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    upgrade(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
        typeArguments?: readonly string[];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::upgrade`,
        ...(options.typeArguments?.length && { typeArguments: options.typeArguments as string[] }),
        arguments: [...options.arguments],
      });
    },
    version(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::versioned::version`,
        arguments: [...options.arguments],
      });
    },
  },
  zklogin_verified_id: {
    audience(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::audience`,
        arguments: [...options.arguments],
      });
    },
    check_zklogin_id(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::check_zklogin_id`,
        arguments: [...options.arguments],
      });
    },
    delete(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::delete`,
        arguments: [...options.arguments],
      });
    },
    issuer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::issuer`,
        arguments: [...options.arguments],
      });
    },
    key_claim_name(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::key_claim_name`,
        arguments: [...options.arguments],
      });
    },
    key_claim_value(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::key_claim_value`,
        arguments: [...options.arguments],
      });
    },
    owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::owner`,
        arguments: [...options.arguments],
      });
    },
    verify_zklogin_id(
      tx: Transaction,
      options: {
        arguments: readonly [
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
          TransactionArgument,
        ];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_id::verify_zklogin_id`,
        arguments: [...options.arguments],
      });
    },
  },
  zklogin_verified_issuer: {
    check_zklogin_issuer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_issuer::check_zklogin_issuer`,
        arguments: [...options.arguments],
      });
    },
    delete(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_issuer::delete`,
        arguments: [...options.arguments],
      });
    },
    issuer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_issuer::issuer`,
        arguments: [...options.arguments],
      });
    },
    owner(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_issuer::owner`,
        arguments: [...options.arguments],
      });
    },
    verify_zklogin_issuer(
      tx: Transaction,
      options: {
        arguments: readonly [TransactionArgument, TransactionArgument];
      },
    ): TransactionResult {
      return tx.moveCall({
        target: `${packageId}::zklogin_verified_issuer::verify_zklogin_issuer`,
        arguments: [...options.arguments],
      });
    },
  },
} as const;
