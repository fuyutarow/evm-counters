[tools]
node = "24.8.0"
bun = "1.2.22"
foundry = "1.3.6"

[vars]
default_network = "sepolia"
gas_budget = "100000000"

# ===========================
# 🚀 DEVELOPMENT
# ===========================

[tasks.install]
description = "Install dependencies"
alias = "i"
run = "bun install"

[tasks.dev]
description = "Start full development environment (Anvil + contracts + frontend)"
alias = "d"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🚀 Starting full development environment..."
echo ""

# Kill any existing anvil processes
if pgrep -f anvil > /dev/null; then
    echo "Stopping existing Anvil processes..."
    pkill -f anvil
    sleep 2
fi

echo "Starting Anvil in background..."
anvil &
ANVIL_PID=$!
echo "Anvil started with PID: $ANVIL_PID"
echo ""
sleep 3
echo "Deploying contracts..."
cd contracts && OWNER=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 forge script script/Deploy.s.sol --rpc-url http://localhost:8545 --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 --broadcast
echo ""
echo "Starting frontend..."
echo "Press Ctrl+C to stop both Anvil and frontend"
trap "kill $ANVIL_PID 2>/dev/null" EXIT
cd .. && bun run dev
'''

[tasks.dev-frontend]
description = "Start frontend development server only"
alias = "df"
run = "bun run dev"

[tasks.dev-contracts]
description = "Start Anvil blockchain only"
alias = "dc"
run = "anvil"

[tasks.build]
description = "Build the project"
alias = "b"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "📦 Building project..."
echo ""
echo "Step 1: Building contracts..."
forge build
echo ""
echo "Step 2: Building Next.js app..."
bun run build
echo ""
echo "✅ Build complete!"
'''

[tasks.lint]
description = "Run all linters (Biome + ESLint + TypeScript)"
alias = "l"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔍 Running all linters..."
echo ""
echo "Step 1: Biome check..."
bunx biome check .
echo "✅ Biome passed"
echo ""
echo "Step 2: ESLint check..."
npx eslint . --ext .ts,.tsx --max-warnings 0
echo "✅ ESLint passed"
echo ""
echo "Step 3: TypeScript check..."
bunx tsc --noEmit
echo "✅ TypeScript passed"
echo ""
echo "🎉 All checks passed!"
'''

[tasks.format]
description = "Format code with biome"
alias = "fmt"
run = "bunx biome format --write ."

[tasks.typecheck]
description = "Run TypeScript type check"
alias = "tc"
run = "bunx tsc --noEmit"

# ===========================
# 🔍 LINT (チェックのみ)
# ===========================

[tasks.lint-biome]
description = "Run Biome check only"
alias = "lb"
run = "bunx biome check ."

[tasks.lint-eslint]
description = "Run ESLint check only"
alias = "le"
run = "npx eslint . --ext .ts,.tsx --max-warnings 0"

[tasks.lint-types]
description = "Run TypeScript check only"
alias = "lt"
run = "bunx tsc --noEmit"


# ===========================
# 🔧 FIX (自動修正)
# ===========================

[tasks.fix]
description = "Fix all auto-fixable issues (Biome unsafe + ESLint) + TypeScript check"
alias = "f"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🔧 Fixing all auto-fixable issues..."
echo ""
echo "Step 1: Biome unsafe fix..."
bunx biome check --write --unsafe .
echo "✅ Biome unsafe fixed"
echo ""
echo "Step 2: ESLint fix..."
npx eslint src --ext .ts,.tsx --fix || true
echo "✅ ESLint fixed"
echo ""
echo "Step 3: TypeScript check..."
bunx tsc --noEmit
echo "✅ TypeScript passed"
echo ""
echo "🎉 All fixable issues resolved!"
'''

[tasks.fix-biome]
description = "Fix with Biome only"
alias = "fb"
run = "bunx biome check --write ."

[tasks.fix-eslint]
description = "Fix with ESLint only"
alias = "fe"
run = "npx eslint src --ext .ts,.tsx --fix"

[tasks.fix-unsafe]
description = "Fix with Biome unsafe mode (aggressive)"
alias = "fu"
run = "bunx biome check --write --unsafe ."

[tasks.clean]
description = "Clean all build artifacts and caches"
alias = "c"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🧹 Cleaning all build artifacts..."
rip .next || true
rip .next-dev || true
rip tsconfig.tsbuildinfo || true
rip dist || true
rip contracts/out || true
rip contracts/cache || true
rip contracts/broadcast || true
echo "✅ All cleaned!"
'''

# ===========================
# 📦 BUILD & DEPLOY
# ===========================

[tasks.preview]
description = "Preview built app"
alias = "p"
run = "bun run preview"

[tasks.up]
description = "Update dependencies to latest versions"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "📦 Checking for outdated packages..."
bunx npm-check-updates
echo ""
echo "📦 Updating package.json to latest versions..."
bunx npm-check-updates -u
echo ""
echo "📦 Installing updated dependencies..."
npm install
echo "✅ Dependencies updated to latest versions!"
'''

[tasks.faucet]
description = "Open Sepolia faucet in browser"
run = "open https://sepoliafaucet.com"


[tasks.deploy]
description = "Deploy contracts to network | 引数: [NETWORK] (default: sepolia)"
alias = "deploy"
run = '''
#!/usr/bin/env bash
set -euo pipefail
NETWORK="${1:-sepolia}"

echo "🚀 Deploying contracts to $NETWORK..."
echo ""
echo "Step 1: Building contracts..."
cd contracts && forge build
echo ""
echo "Step 2: Deploying contracts..."
forge script script/Deploy.s.sol --rpc-url $NETWORK --broadcast --verify
echo ""
echo "✅ Deployment complete!"
echo ""
echo "🔄 Next steps:"
echo "  1. Update contract addresses in frontend config"
echo "  2. mise run codegen    # Update TypeScript ABIs"
echo "  3. mise run dev        # Restart development server"
'''

# 引数: [NETWORK] (default: sepolia)
# 機能: コントラクトのビルドとデプロイを実行
# 対応ネットワーク: sepolia, mainnet, localhost等
#
# 使用例:
# mise run deploy sepolia    # Sepoliaにデプロイ
# mise run deploy mainnet    # Mainnetにデプロイ
#
# デプロイ後の作業:
# 1. フロントエンドの設定でコントラクトアドレスを更新
# 2. mise run codegen  # TypeScript ABI定義の再生成
# 3. mise run dev      # 開発サーバー再起動


# ===========================
# 🧪 TESTING
# ===========================

[tasks.test]
description = "Run all tests with Bun"
alias = "t"
run = "bun test"

[tasks.test-watch]
description = "Run tests in watch mode"
alias = "tw"
run = "bun test --watch"

[tasks.codegen-abi]
description = "Generate TypeScript ABIs from Forge artifacts"
alias = ["gen-abi", "abigen"]
run = "forge build && bunx @wagmi/cli generate"


[tasks.codegen]
description = "Generate TypeScript types from contracts"
alias = "gen"
run = '''
#!/usr/bin/env bash
set -euo pipefail
echo "🏗️  Generating types..."
echo ""
echo "Step 1: Building contracts..."
cd contracts && forge build
echo ""
echo "Step 2: Generating TypeScript ABIs..."
cd .. && bunx @wagmi/cli generate
echo ""
echo "✅ All types generated successfully!"
'''


# ===========================
# ⚒️ FOUNDRY TOOLS
# ===========================

[tasks.forge-test]
description = "Run Foundry tests"
alias = "ft"
run = "cd contracts && forge test"

[tasks.forge-fmt]
description = "Format Solidity code"
alias = "solidity-fmt"
run = "cd contracts && forge fmt"

[tasks.anvil]
description = "Start local Ethereum node"
run = "anvil"
